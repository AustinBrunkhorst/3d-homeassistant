{"version":3,"sources":["assets/models/rooms.fbx","App.tsx","scene/CubeRoomState.ts","util/Model.ts","scene/Config.ts","scene/Room.ts","util/Geometry.ts","util/Vector.ts","util/Camera.ts","scene/ObjectFocusCamera.ts","scene/CubeRoomScene.ts","components/FullscreenCanvas.ts","hooks/Renderer.ts","hooks/EventListener.ts","components/CubeRoomSceneView.tsx","hooks/AnimationFrame.ts","lib/threejs/FBXLoader.js","serviceWorker.ts","GlobalStyle.ts","index.tsx","environment.ts"],"names":["module","exports","__webpack_require__","p","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_hot_loader__WEBPACK_IMPORTED_MODULE_1__","_environment__WEBPACK_IMPORTED_MODULE_2__","_components_CubeRoomSceneView__WEBPACK_IMPORTED_MODULE_3__","App","a","createElement","isProd","hot","initialState","selectedRoomIndex","FBXLoader","require","sceneCache","Map","importFbx","path","onProgress","Promise","resolve","reject","cachedResult","get","undefined","console","log","concat","load","result","resultCopy","clone","set","event","lengthComputable","loaded","total","error","roomObjectNamePrefix","Room","object","Object","classCallCheck","this","scene","name","lights","substr","length","Scene","buildLights","add","createClass","key","value","time","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","light","color","setHSL","userData","hueOffset","transitionSpeed","err","return","_this","children","filter","child","startsWith","map","transform","hue","Math","random","PointLight","Color","shadow","bias","castShadow","receiveShadow","position","copy","getBoxVerts","box","min","max","Vector3","x","y","z","unitX","unitY","fitObjectsInViewport","viewportWidth","viewportHeight","camera","objects","aspect","inverseAspect","_fitOrthoDimensionsTo","maxWidth","maxHeight","Box3","updateMatrixWorld","setFromObject","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","local","applyMatrix4","matrixWorldInverse","abs","dot","fitOrthoDimensionsToObjects","_fitOrthoDimensionsTo2","slicedToArray","setOrthoDimensions","width","height","left","right","top","bottom","updateProjectionMatrix","cameraCenterOffset","ObjectFocusCamera","renderer","OrthographicCamera","animation","animationState","focusedObjects","near","far","zoom","animate","arguments","center","expandByObject","getCenter","getBoundingBoxCenter","currentPosition","newPosition","_getOrthoDimensions","_getOrthoDimensions2","_this$camera$position","lookAt","_this$getViewportDime","getViewportDimensions","_this$getViewportDime2","_fitObjectsInViewport","_fitObjectsInViewport2","targetWidth","targetHeight","anime","targets","easing","autoplay","update","_this$animationState","onViewportResize","completed","tick","_this$getViewportDime3","_this$getViewportDime4","_fitObjectsInViewport3","_fitObjectsInViewport4","newOrthoWidth","newOrthoHeight","_this$renderer$getSiz","getSize","CubeRoomScene","state","roomObjects","rooms","onViewportTouchStart","e","preventDefault","touch","touches","handleViewportClick","clientX","clientY","onViewportClick","setClearColor","_init","asyncToGenerator","regenerator_default","mark","_callee","importedScene","roomsRoot","directionalLight","_ref2","wrap","_context","prev","roomsModelPath","sent","getObjectByName","Error","t0","finish","focusOnObjects","getFocusedObjects","bindEvents","stop","apply","unbindEvents","autoClear","clear","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","render","domElement","addEventListener","removeEventListener","viewportX","viewportY","_ref5","getBoundingClientRect","ndc","Vector2","raycaster","Raycaster","setFromCamera","i","intersectObjects","roomIndex","FullscreenCanvas","styled","canvas","_templateObject","useWebGLRenderer","target","onResize","useRef","useEffect","current","WebGLRenderer","antialias","updateViewportSize","shadowMap","enabled","type","PCFSoftShadowMap","dispose","_window","window","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","setSize","listener","useEventListener","CubeRoomSceneView","sceneState","init","callback","callbackRef","useLayoutEffect","loop","frameRef","requestAnimationFrame","cancelAnimationFrame","useAnimationFrame","react_default","ref","d","__webpack_exports__","THREE","pako","fbxTree","connections","sceneGraph","manager","DefaultLoadingManager","FBXTreeParser","textureLoader","GeometryParser","AnimationParser","TextParser","BinaryParser","BinaryReader","buffer","littleEndian","dv","DataView","offset","FBXTree","getFbxVersion","text","match","parseInt","convertFBXTimeToSeconds","prototype","constructor","crossOrigin","url","onLoad","onError","self","LoaderUtils","extractUrlBase","loader","FileLoader","setResponseType","parse","setTimeout","itemError","setPath","setResourcePath","resourcePath","setCrossOrigin","FBXBuffer","CORRECT","byteLength","convertArrayBufferToString","isFbxFormatBinary","FBXText","cursor","read","slice","num","isFbxFormatASCII","TextureLoader","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","parseScene","connectionMap","Connections","forEach","rawConnection","fromID","toID","relationship","has","parents","parentRelationship","ID","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","base64Content","image","parseImage","filename","split","pop","content","fileName","extension","lastIndexOf","toLowerCase","TGALoader","warn","Loader","Handlers","tgaLoader","array","Uint8Array","URL","createObjectURL","Blob","textureMap","textureNodes","Texture","texture","parseTexture","textureNode","loadTexture","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","valueV","wrapS","RepeatWrapping","ClampToEdgeWrapping","wrapT","values","Scaling","repeat","currentPath","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","MeshPhongMaterial","MeshLambertMaterial","setValues","BumpFactor","bumpScale","Diffuse","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","bumpMap","getTexture","displacementMap","emissiveMap","normalMap","envMap","mapping","EquirectangularReflectionMapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","Matrix4","TransformLink","Indexes","Weights","bones","rawMorphTargets","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","Group","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","connection","parent","bindSkeleton","createAmbientLight","setupMorphMaterials","traverse","node","transformData","parentMatrixWorld","matrix","generateTransform","applyMatrix","animations","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","Bone","PropertyBinding","sanitizeNodeName","getTransformData","bone","subBone","matrixWorld","cameraAttribute","attr","NodeAttribute","Object3D","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","AspectWidth","AspectHeight","fov","FieldOfView","focalLength","FocalLength","PerspectiveCamera","setFocalLength","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","DirectionalLight","angle","PI","InnerAngle","degToRad","penumbra","OuterAngle","SpotLight","CastShadows","geometry","attributes","vertexColors","VertexColors","FBX_Deformer","skinning","SkinnedMesh","normalizeSkinWeights","Mesh","reduce","geo","LineBasicMaterial","linewidth","Line","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","bindMatrices","parsePoseNodes","geoConnParent","bind","Skeleton","BindPoseNode","Pose","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","AmbientLight","isMesh","morphAttributes","setupMorphMaterial","index","uuid","matUuid","sharedMat","mat","clonedMat","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","BufferGeometry","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","Float32BufferAttribute","vertex","applyToBufferAttribute","addAttribute","colors","Uint16BufferAttribute","weightsIndices","vertexWeights","normal","normalAttribute","Matrix3","getNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","parseUVs","weightTable","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","parentGeo","parentGeoNode","rawTarget","morphGeoNode","genMorphGeometry","morphGeo","morphPositions","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UV","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","NURBSCurve","order","Order","isNaN","startKnot","endKnot","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","Vector4","Form","vertices","getPoints","positions","Float32Array","toArray","BufferAttribute","animationClips","rawClips","parseClips","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","curveNode","curves","rawCurves","animationCurve","times","KeyTime","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","generateTracks","AnimationClip","Quaternion","decompose","Euler","setFromQuaternion","T","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","VectorKeyframeTrack","interpolateRotations","setFromEuler","inverse","quaternion","euler","quaternionValues","premultiply","multiply","QuaternionKeyframeTrack","val","morphNum","morphTargetDictionary","NumberKeyframeTrack","sort","elem","prevValue","xIndex","yIndex","zIndex","xValue","yValue","zValue","curve","valuesSpan","absoluteSpan","numSubIntervals","step","nextValue","initialTime","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","allNodes","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","connProps","from","to","rest","append","parseNumberArray","parseNodeSpecialProperty","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","type2","flag","reader","skip","version","getUint32","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","encoding","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","reader2","inflate","low","high","nullByte","decodeText","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lGlobalT","setPosition","makeRotationFromEuler","lLRM","lParentGRM","extractRotation","lLSM","lParentGSM","lParentGRSM","lGlobalRS","lParentTM","copyPosition","getInverse","lParentLSM","lParentGSM_noLocal","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","a1","a2","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","GlobalStyle","createGlobalStyle","ReactDOM","Fragment","src_GlobalStyle","document","getElementById","process","href","origin","fetch","response","contentType","headers","status","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c5c90df7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rooms.7e05c6dd.fbx\";","import React from \"react\";\r\nimport { hot } from \"react-hot-loader\";\r\n\r\nimport { isProd } from \"./environment\";\r\nimport { CubeRoomSceneView } from \"./components/CubeRoomSceneView\";\r\n\r\nfunction App() {\r\n  return <CubeRoomSceneView />;\r\n}\r\n\r\nexport default (isProd ? App : hot(module)(App));\r\n","export interface CubeRoomState {\r\n  selectedRoomIndex: number;\r\n}\r\n\r\nexport const initialState: CubeRoomState = {\r\n  selectedRoomIndex: 0\r\n};\r\n","import { IFbxSceneGraph } from \"three\";\r\n\r\nconst FBXLoader = require(\"../lib/threejs/FBXLoader\");\r\n\r\nconst sceneCache = new Map<string, IFbxSceneGraph>();\r\n\r\nexport function importFbx(\r\n  path: string,\r\n  onProgress?: (progress: number) => void\r\n): Promise<IFbxSceneGraph> {\r\n  return new Promise((resolve, reject) => {\r\n    const cachedResult = sceneCache.get(path);\r\n\r\n    if (cachedResult !== undefined) {\r\n      console.log(`[fbx] using cached version of ${path}`);\r\n\r\n      return resolve(cachedResult);\r\n    }\r\n\r\n    const loader = new FBXLoader();\r\n\r\n    loader.load(\r\n      path,\r\n      (result: IFbxSceneGraph) => {\r\n        const resultCopy = result.clone();\r\n\r\n        sceneCache.set(path, resultCopy);\r\n\r\n        resolve(resultCopy);\r\n      },\r\n      (event: ProgressEvent) =>\r\n        onProgress &&\r\n        onProgress(event.lengthComputable ? event.loaded / event.total : 0),\r\n      (error: Error) => reject(error)\r\n    );\r\n  });\r\n}\r\n","import roomsModelPath from \"../assets/models/rooms.fbx\";\r\n\r\n// public url for fbx model with rooms\r\nexport { roomsModelPath };\r\n\r\n// object name for the parent of all rooms\r\nexport const rootRoomsObjectName = \"rooms\";\r\n\r\n// object name prefix for room groups\r\nexport const roomObjectNamePrefix = \"room\";\r\n\r\n// object name prefix for light groups within rooms\r\nexport const lightObjectNamePrefix = \"light\";\r\n\r\n// object name for the directional light in the fbx file\r\nexport const globalDirectionalLightObjectName = \"directionalLight\";\r\n","import { Object3D, PointLight, Scene, Color } from \"three\";\r\n\r\nimport { lightObjectNamePrefix, roomObjectNamePrefix } from \"./Config\";\r\nimport { SceneComponent } from \"./Scene\";\r\n\r\nexport class Room implements SceneComponent {\r\n  public scene: Scene;\r\n\r\n  name: string;\r\n  lights: PointLight[];\r\n\r\n  constructor(private object: Object3D) {\r\n    this.name = object.name.substr(0, roomObjectNamePrefix.length);\r\n\r\n    this.scene = new Scene();\r\n\r\n    this.lights = this.buildLights();\r\n\r\n    this.scene.add(object);\r\n  }\r\n\r\n  update(time: number) {\r\n    for (const light of this.lights) {\r\n      light.color.setHSL(\r\n        (light.userData.hueOffset + time / light.userData.transitionSpeed) %\r\n          360,\r\n        1,\r\n        0.5\r\n      );\r\n    }\r\n  }\r\n\r\n  private buildLights() {\r\n    return this.object.children\r\n      .filter(child => child.name.startsWith(lightObjectNamePrefix))\r\n      .map(transform => {\r\n        const hue = Math.random();\r\n\r\n        const light = new PointLight(new Color().setHSL(hue, 1, 0.5), 0.75, 50);\r\n\r\n        light.userData.hueOffset = hue;\r\n        light.userData.transitionSpeed = Math.random() * 20000 + 3000;\r\n\r\n        light.shadow.bias = -0.01;\r\n        light.castShadow = false;\r\n        light.receiveShadow = false;\r\n\r\n        light.position.copy(transform.position);\r\n\r\n        this.object.add(light);\r\n\r\n        return light;\r\n      });\r\n  }\r\n}\r\n","import { Box3, Vector3, Object3D } from \"three\";\r\n\r\n/**\r\n * Gets all vertices in world space of the given box\r\n * @param box\r\n */\r\nexport function getBoxVerts(box: Box3): Vector3[] {\r\n  const { min, max } = box;\r\n\r\n  return [\r\n    new Vector3(min.x, min.y, min.z), // 000\r\n    new Vector3(min.x, min.y, max.z), // 001\r\n    new Vector3(min.x, max.y, min.z), // 010\r\n    new Vector3(min.x, max.y, max.z), // 011\r\n    new Vector3(max.x, min.y, min.z), // 100\r\n    new Vector3(max.x, min.y, max.z), // 101\r\n    new Vector3(max.x, max.y, min.z), // 110\r\n    new Vector3(max.x, max.y, max.z) // 111\r\n  ];\r\n}\r\n\r\nexport function getBoundingBoxCenter(objects: Object3D[]) {\r\n  const box = new Box3();\r\n\r\n  for (const object of objects) {\r\n    box.expandByObject(object);\r\n  }\r\n\r\n  const center = new Vector3();\r\n\r\n  box.getCenter(center);\r\n\r\n  return center;\r\n}\r\n","import { Vector3 } from \"three\";\r\n\r\nexport const unitX = new Vector3(1, 0, 0);\r\nexport const unitY = new Vector3(0, 1, 0);\r\nexport const unitZ = new Vector3(0, 0, 1);\r\n","import { OrthographicCamera, Object3D, Box3 } from \"three\";\r\n\r\nimport { getBoxVerts } from \"./Geometry\";\r\nimport { unitX, unitY } from \"./Vector\";\r\n\r\nexport function fitOrthoDimensionsToObjects(\r\n  camera: OrthographicCamera,\r\n  objects: Object3D[]\r\n): [number, number] {\r\n  let maxWidth = -Infinity;\r\n  let maxHeight = -Infinity;\r\n\r\n  const box = new Box3();\r\n\r\n  camera.updateMatrixWorld(true);\r\n\r\n  for (const child of objects) {\r\n    box.setFromObject(child);\r\n\r\n    for (const vert of getBoxVerts(box)) {\r\n      const local = vert.clone().applyMatrix4(camera.matrixWorldInverse);\r\n\r\n      maxWidth = Math.max(maxWidth, Math.abs(unitX.dot(local)));\r\n      maxHeight = Math.max(maxHeight, Math.abs(unitY.dot(local)));\r\n    }\r\n  }\r\n\r\n  return [maxWidth, maxHeight];\r\n}\r\n\r\nexport function fitObjectsInViewport(\r\n  viewportWidth: number,\r\n  viewportHeight: number,\r\n  camera: OrthographicCamera,\r\n  objects: Object3D[]\r\n): [number, number] {\r\n  const aspect = viewportWidth / viewportHeight;\r\n  const inverseAspect = viewportHeight / viewportWidth;\r\n\r\n  const [maxFrustumWidth, maxFrustumHeight] = fitOrthoDimensionsToObjects(\r\n    camera,\r\n    objects\r\n  );\r\n\r\n  const frustumWidth = maxFrustumWidth * (aspect > 1.0 ? aspect : 1.0);\r\n\r\n  const frustumHeight =\r\n    maxFrustumHeight * (inverseAspect > 1.0 ? inverseAspect : 1.0);\r\n\r\n  return [frustumWidth, frustumHeight];\r\n}\r\n\r\nexport function getOrthoDimensions(camera: OrthographicCamera) {\r\n  const width = camera.right;\r\n  const height = camera.top;\r\n\r\n  return [width, height];\r\n}\r\n\r\nexport function setOrthoDimensions(\r\n  camera: OrthographicCamera,\r\n  width: number,\r\n  height: number\r\n): void {\r\n  camera.left = -width;\r\n  camera.right = width;\r\n  camera.top = height;\r\n  camera.bottom = -height;\r\n\r\n  camera.updateProjectionMatrix();\r\n}\r\n","import { OrthographicCamera, Object3D, Vector3, WebGLRenderer } from \"three\";\r\nimport anime, { AnimeInstance } from \"animejs\";\r\n\r\nimport { SceneComponent } from \"./Scene\";\r\nimport {\r\n  fitObjectsInViewport,\r\n  setOrthoDimensions,\r\n  getOrthoDimensions\r\n} from \"../util/Camera\";\r\nimport { getBoundingBoxCenter } from \"../util/Geometry\";\r\n\r\ninterface AnimationState {\r\n  width: number;\r\n  height: number;\r\n  x: number;\r\n  y: number;\r\n  z: number;\r\n}\r\n\r\nconst cameraCenterOffset = new Vector3(-30, 25, -30);\r\n\r\nexport class ObjectFocusCamera implements SceneComponent {\r\n  public camera: OrthographicCamera = new OrthographicCamera(0, 0, 0, 0, 0, 0);\r\n\r\n  private animation?: AnimeInstance;\r\n  private animationState: AnimationState = {\r\n    width: 0,\r\n    height: 0,\r\n    x: 0,\r\n    y: 0,\r\n    z: 0\r\n  };\r\n\r\n  private focusedObjects: Object3D[] = [];\r\n\r\n  public constructor(private renderer: WebGLRenderer) {\r\n    this.camera.near = 0.1;\r\n    this.camera.far = 200;\r\n    this.camera.zoom = 1;\r\n  }\r\n\r\n  public focusOnObjects(objects: Object3D[], animate: boolean = false) {\r\n    const center = getBoundingBoxCenter(objects);\r\n\r\n    this.focusedObjects = objects;\r\n\r\n    const currentPosition = this.camera.position.clone();\r\n    const newPosition = center.clone().add(cameraCenterOffset);\r\n\r\n    if (animate) {\r\n      const [width, height] = getOrthoDimensions(this.camera);\r\n      const { x, y, z } = this.camera.position;\r\n\r\n      this.animationState = {\r\n        width,\r\n        height,\r\n        x,\r\n        y,\r\n        z\r\n      };\r\n\r\n      this.camera.position.copy(newPosition);\r\n      this.camera.lookAt(center);\r\n\r\n      this.camera.updateMatrixWorld(true);\r\n\r\n      const [viewportWidth, viewportHeight] = this.getViewportDimensions();\r\n\r\n      const [targetWidth, targetHeight] = fitObjectsInViewport(\r\n        viewportWidth,\r\n        viewportHeight,\r\n        this.camera,\r\n        this.focusedObjects\r\n      );\r\n\r\n      this.camera.position.copy(currentPosition);\r\n\r\n      this.animation = anime({\r\n        targets: this.animationState,\r\n        width: targetWidth,\r\n        height: targetHeight,\r\n        x: newPosition.x,\r\n        y: newPosition.y,\r\n        z: newPosition.z,\r\n        easing: \"spring(0.65, 100, 14, 11)\",\r\n        autoplay: false,\r\n        update: () => {\r\n          const { width, height, x, y, z } = this.animationState;\r\n\r\n          this.camera.position.set(x, y, z);\r\n\r\n          setOrthoDimensions(this.camera, width, height);\r\n\r\n          this.camera.updateMatrixWorld(true);\r\n        }\r\n      });\r\n    } else {\r\n      this.camera.position.copy(newPosition);\r\n      this.camera.lookAt(center);\r\n\r\n      this.onViewportResize();\r\n    }\r\n  }\r\n\r\n  public update(time: number) {\r\n    if (this.animation && !this.animation.completed) {\r\n      this.animation.tick(time);\r\n    }\r\n  }\r\n\r\n  public onViewportResize() {\r\n    const [viewportWidth, viewportHeight] = this.getViewportDimensions();\r\n\r\n    this.camera.updateMatrixWorld(true);\r\n\r\n    const [newOrthoWidth, newOrthoHeight] = fitObjectsInViewport(\r\n      viewportWidth,\r\n      viewportHeight,\r\n      this.camera,\r\n      this.focusedObjects\r\n    );\r\n\r\n    setOrthoDimensions(this.camera, newOrthoWidth, newOrthoHeight);\r\n  }\r\n\r\n  private getViewportDimensions() {\r\n    const { width, height } = this.renderer.getSize();\r\n\r\n    return [width, height];\r\n  }\r\n}\r\n","import {\r\n  WebGLRenderer,\r\n  Object3D,\r\n  Vector2,\r\n  Raycaster,\r\n  Mesh,\r\n  Color\r\n} from \"three\";\r\n\r\nimport { importFbx } from \"../util/Model\";\r\nimport { Room } from \"./Room\";\r\nimport { ObjectFocusCamera } from \"./ObjectFocusCamera\";\r\nimport { CubeRoomState } from \"./CubeRoomState\";\r\nimport {\r\n  roomsModelPath,\r\n  rootRoomsObjectName,\r\n  roomObjectNamePrefix,\r\n  globalDirectionalLightObjectName\r\n} from \"./Config\";\r\n\r\nexport class CubeRoomScene {\r\n  private roomObjects: Object3D[] = [];\r\n\r\n  private rooms: Room[] = [];\r\n  private camera: ObjectFocusCamera;\r\n\r\n  constructor(private renderer: WebGLRenderer, private state: CubeRoomState) {\r\n    renderer.setClearColor(new Color(0x3a362e));\r\n\r\n    this.camera = new ObjectFocusCamera(renderer);\r\n  }\r\n\r\n  public async init() {\r\n    const importedScene = await importFbx(roomsModelPath);\r\n\r\n    const roomsRoot = importedScene.getObjectByName(rootRoomsObjectName);\r\n\r\n    if (!roomsRoot) {\r\n      throw new Error(`Expected object with name \"${rootRoomsObjectName}\"`);\r\n    }\r\n\r\n    this.roomObjects = roomsRoot.children\r\n      .filter(child => child.name.startsWith(roomObjectNamePrefix))\r\n      .map(object => object.clone());\r\n\r\n    this.rooms = this.roomObjects.map(object => new Room(object));\r\n\r\n    const directionalLight = importedScene.getObjectByName(\r\n      globalDirectionalLightObjectName\r\n    );\r\n\r\n    // add directional light to all of the scenes\r\n    if (directionalLight) {\r\n      directionalLight.castShadow = true;\r\n\r\n      for (const { scene } of this.rooms) {\r\n        scene.add(directionalLight.clone());\r\n      }\r\n    }\r\n\r\n    this.camera.focusOnObjects(this.getFocusedObjects(), false);\r\n\r\n    this.bindEvents();\r\n  }\r\n\r\n  public dispose() {\r\n    this.unbindEvents();\r\n  }\r\n\r\n  public update(time: number) {\r\n    for (const room of this.rooms) {\r\n      room.update(time);\r\n    }\r\n\r\n    this.camera.update(time);\r\n  }\r\n\r\n  public render() {\r\n    this.renderer.autoClear = false;\r\n    this.renderer.clear();\r\n\r\n    for (const { scene } of this.rooms) {\r\n      this.renderer.render(scene, this.camera.camera);\r\n    }\r\n  }\r\n\r\n  public onViewportResize() {\r\n    this.camera.onViewportResize();\r\n  }\r\n\r\n  private bindEvents() {\r\n    const { domElement } = this.renderer;\r\n\r\n    domElement.addEventListener(\"touchstart\", this.onViewportTouchStart);\r\n    domElement.addEventListener(\"click\", this.onViewportClick);\r\n  }\r\n\r\n  private unbindEvents() {\r\n    const { domElement } = this.renderer;\r\n\r\n    domElement.removeEventListener(\"touchstart\", this.onViewportTouchStart);\r\n    domElement.removeEventListener(\"click\", this.onViewportClick);\r\n  }\r\n\r\n  private onViewportTouchStart = (e: TouchEvent) => {\r\n    // prevent black flicker on ios\r\n    e.preventDefault();\r\n\r\n    const touch = e.touches[0];\r\n\r\n    if (touch) {\r\n      this.handleViewportClick(touch.clientX, touch.clientY);\r\n    }\r\n  };\r\n\r\n  private onViewportClick = (e: MouseEvent) => {\r\n    this.handleViewportClick(e.clientX, e.clientY);\r\n  };\r\n\r\n  private handleViewportClick(viewportX: number, viewportY: number) {\r\n    this.state.selectedRoomIndex =\r\n      (this.state.selectedRoomIndex + 1) % (this.rooms.length + 1);\r\n\r\n    const {\r\n      x,\r\n      y,\r\n      width,\r\n      height\r\n    } = this.renderer.domElement.getBoundingClientRect() as DOMRect;\r\n\r\n    const ndc = new Vector2();\r\n\r\n    ndc.x = ((viewportX - x) / width) * 2 - 1;\r\n    ndc.y = -((viewportY - y) / height) * 2 + 1;\r\n\r\n    const raycaster = new Raycaster();\r\n\r\n    raycaster.setFromCamera(ndc, this.camera.camera);\r\n\r\n    // default to no selection\r\n    this.state.selectedRoomIndex = 0;\r\n\r\n    for (let i = 0; i < this.rooms.length; ++i) {\r\n      const { scene } = this.rooms[i];\r\n\r\n      const intersects = raycaster.intersectObjects(scene.children, true);\r\n\r\n      if (intersects.length > 0) {\r\n        this.state.selectedRoomIndex = i + 1;\r\n\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.camera.focusOnObjects(this.getFocusedObjects(), true);\r\n  }\r\n\r\n  private getFocusedObjects() {\r\n    // 0 is all, the rest are offset by 1\r\n    const roomIndex = Math.abs(this.state.selectedRoomIndex);\r\n\r\n    return roomIndex === 0\r\n      ? this.roomObjects\r\n      : [this.roomObjects[roomIndex - 1]];\r\n  }\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const FullscreenCanvas = styled.canvas`\r\n  box-sizing: border-box;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n","import { useRef, useEffect, RefObject } from \"react\";\r\nimport { WebGLRenderer, PCFSoftShadowMap } from \"three\";\r\n\r\nimport { Nullable } from \"../util/Types\";\r\nimport { useEventListener } from \"./EventListener\";\r\n\r\nexport type ResizeCallback = (width: number, height: number) => void;\r\n\r\nexport function useWebGLRenderer(\r\n  target: RefObject<HTMLCanvasElement>,\r\n  onResize?: ResizeCallback\r\n) {\r\n  const renderer = useRef<Nullable<WebGLRenderer>>(null);\r\n\r\n  useEffect(() => {\r\n    if (!target.current) {\r\n      return;\r\n    }\r\n\r\n    renderer.current = new WebGLRenderer({\r\n      canvas: target.current,\r\n      antialias: true\r\n    });\r\n\r\n    updateViewportSize();\r\n\r\n    renderer.current.shadowMap.enabled = false;\r\n    renderer.current.shadowMap.type = PCFSoftShadowMap;\r\n\r\n    return () => {\r\n      if (renderer.current) {\r\n        renderer.current.dispose();\r\n      }\r\n    };\r\n  }, [target.current]);\r\n\r\n  const updateViewportSize = () => {\r\n    if (!renderer.current || !target.current) {\r\n      return;\r\n    }\r\n\r\n    const { innerWidth, innerHeight } = window;\r\n\r\n    renderer.current.setPixelRatio(window.devicePixelRatio);\r\n    renderer.current.setSize(innerWidth, innerHeight, false);\r\n  };\r\n\r\n  useEventListener(window, \"resize\", () => {\r\n    updateViewportSize();\r\n\r\n    if (onResize) {\r\n      onResize(innerWidth, innerHeight);\r\n    }\r\n  });\r\n\r\n  return renderer;\r\n}\r\n","import { useEffect } from \"react\";\r\n\r\nexport function useEventListener(\r\n  target: EventTarget,\r\n  event: string,\r\n  listener: EventListenerOrEventListenerObject\r\n) {\r\n  useEffect(() => {\r\n    target.addEventListener(event, listener);\r\n\r\n    return () => target.removeEventListener(event, listener);\r\n  }, [target, event, listener]);\r\n}\r\n","import React, { useRef, useEffect } from \"react\";\r\n\r\nimport { Nullable } from \"../util/Types\";\r\nimport { CubeRoomState, initialState } from \"../scene/CubeRoomState\";\r\nimport { CubeRoomScene } from \"../scene/CubeRoomScene\";\r\nimport { FullscreenCanvas } from \"./FullscreenCanvas\";\r\nimport { useWebGLRenderer } from \"../hooks/Renderer\";\r\nimport { useAnimationFrame } from \"../hooks/AnimationFrame\";\r\n\r\nexport function CubeRoomSceneView() {\r\n  const canvas = useRef<HTMLCanvasElement>(null);\r\n\r\n  const sceneState = useRef<CubeRoomState>(initialState);\r\n  const scene = useRef<Nullable<CubeRoomScene>>(null);\r\n\r\n  const renderer = useWebGLRenderer(canvas, () => {\r\n    if (scene.current) {\r\n      scene.current.onViewportResize();\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (renderer.current) {\r\n      scene.current = new CubeRoomScene(renderer.current, sceneState.current);\r\n\r\n      scene.current.init();\r\n    }\r\n\r\n    return () => {\r\n      if (scene.current) {\r\n        scene.current.dispose();\r\n      }\r\n\r\n      if (renderer.current) {\r\n        renderer.current.dispose();\r\n      }\r\n    };\r\n  }, [canvas.current, CubeRoomScene]);\r\n\r\n  useAnimationFrame(time => {\r\n    if (scene.current) {\r\n      scene.current.update(time);\r\n      scene.current.render();\r\n    }\r\n  });\r\n\r\n  return <FullscreenCanvas ref={canvas} />;\r\n}\r\n","// https://github.com/facebook/react/issues/14195#issuecomment-437942016\r\n\r\nimport { useRef, useLayoutEffect } from \"react\";\r\n\r\nexport function useAnimationFrame(callback: (time: number) => void) {\r\n  const callbackRef = useRef(callback);\r\n\r\n  useLayoutEffect(() => {\r\n    callbackRef.current = callback;\r\n  }, [callback]);\r\n\r\n  const loop = (time: number) => {\r\n    frameRef.current = requestAnimationFrame(loop);\r\n\r\n    callbackRef.current(time);\r\n  };\r\n\r\n  const frameRef = useRef(0);\r\n\r\n  useLayoutEffect(() => {\r\n    frameRef.current = requestAnimationFrame(loop);\r\n    return () => cancelAnimationFrame(frameRef.current);\r\n  }, []);\r\n}\r\n","/**\r\n * @author Kyle-Larson https://github.com/Kyle-Larson\r\n * @author Takahiro https://github.com/takahirox\r\n * @author Lewy Blue https://github.com/looeee\r\n *\r\n * Loader loads FBX file and generates Group representing FBX scene.\r\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\r\n * Versions lower than this may load but will probably have errors\r\n *\r\n * Needs Support:\r\n *  Morph normals / blend shape normals\r\n *\r\n * FBX format references:\r\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\r\n * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\r\n *\r\n * \tBinary format specification:\r\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\r\n */\r\n\r\n// copied from https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/FBXLoader.js\r\n/* eslint-disable */\r\n\r\nconst THREE = require(\"three\");\r\nconst pako = require(\"pako\");\r\n\r\nmodule.exports = (function() {\r\n  var fbxTree;\r\n  var connections;\r\n  var sceneGraph;\r\n\r\n  function FBXLoader(manager) {\r\n    this.manager =\r\n      manager !== undefined ? manager : THREE.DefaultLoadingManager;\r\n  }\r\n\r\n  FBXLoader.prototype = {\r\n    constructor: FBXLoader,\r\n\r\n    crossOrigin: \"anonymous\",\r\n\r\n    load: function(url, onLoad, onProgress, onError) {\r\n      var self = this;\r\n\r\n      var path =\r\n        self.path === undefined\r\n          ? THREE.LoaderUtils.extractUrlBase(url)\r\n          : self.path;\r\n\r\n      var loader = new THREE.FileLoader(this.manager);\r\n      loader.setResponseType(\"arraybuffer\");\r\n\r\n      loader.load(\r\n        url,\r\n        function(buffer) {\r\n          try {\r\n            onLoad(self.parse(buffer, path));\r\n          } catch (error) {\r\n            setTimeout(function() {\r\n              if (onError) onError(error);\r\n\r\n              self.manager.itemError(url);\r\n            }, 0);\r\n          }\r\n        },\r\n        onProgress,\r\n        onError\r\n      );\r\n    },\r\n\r\n    setPath: function(value) {\r\n      this.path = value;\r\n      return this;\r\n    },\r\n\r\n    setResourcePath: function(value) {\r\n      this.resourcePath = value;\r\n      return this;\r\n    },\r\n\r\n    setCrossOrigin: function(value) {\r\n      this.crossOrigin = value;\r\n      return this;\r\n    },\r\n\r\n    parse: function(FBXBuffer, path) {\r\n      if (isFbxFormatBinary(FBXBuffer)) {\r\n        fbxTree = new BinaryParser().parse(FBXBuffer);\r\n      } else {\r\n        var FBXText = convertArrayBufferToString(FBXBuffer);\r\n\r\n        if (!isFbxFormatASCII(FBXText)) {\r\n          throw new Error(\"THREE.FBXLoader: Unknown format.\");\r\n        }\r\n\r\n        if (getFbxVersion(FBXText) < 7000) {\r\n          throw new Error(\r\n            \"THREE.FBXLoader: FBX version not supported, FileVersion: \" +\r\n              getFbxVersion(FBXText)\r\n          );\r\n        }\r\n\r\n        fbxTree = new TextParser().parse(FBXText);\r\n      }\r\n\r\n      // console.log( fbxTree );\r\n\r\n      var textureLoader = new THREE.TextureLoader(this.manager)\r\n        .setPath(this.resourcePath || path)\r\n        .setCrossOrigin(this.crossOrigin);\r\n\r\n      return new FBXTreeParser(textureLoader).parse(fbxTree);\r\n    }\r\n  };\r\n\r\n  // Parse the FBXTree object returned by the BinaryParser or TextParser and return a THREE.Group\r\n  function FBXTreeParser(textureLoader) {\r\n    this.textureLoader = textureLoader;\r\n  }\r\n\r\n  FBXTreeParser.prototype = {\r\n    constructor: FBXTreeParser,\r\n\r\n    parse: function() {\r\n      connections = this.parseConnections();\r\n\r\n      var images = this.parseImages();\r\n      var textures = this.parseTextures(images);\r\n      var materials = this.parseMaterials(textures);\r\n      var deformers = this.parseDeformers();\r\n      var geometryMap = new GeometryParser().parse(deformers);\r\n\r\n      this.parseScene(deformers, geometryMap, materials);\r\n\r\n      return sceneGraph;\r\n    },\r\n\r\n    // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\r\n    // and details the connection type\r\n    parseConnections: function() {\r\n      var connectionMap = new Map();\r\n\r\n      if (\"Connections\" in fbxTree) {\r\n        var rawConnections = fbxTree.Connections.connections;\r\n\r\n        rawConnections.forEach(function(rawConnection) {\r\n          var fromID = rawConnection[0];\r\n          var toID = rawConnection[1];\r\n          var relationship = rawConnection[2];\r\n\r\n          if (!connectionMap.has(fromID)) {\r\n            connectionMap.set(fromID, {\r\n              parents: [],\r\n              children: []\r\n            });\r\n          }\r\n\r\n          var parentRelationship = { ID: toID, relationship: relationship };\r\n          connectionMap.get(fromID).parents.push(parentRelationship);\r\n\r\n          if (!connectionMap.has(toID)) {\r\n            connectionMap.set(toID, {\r\n              parents: [],\r\n              children: []\r\n            });\r\n          }\r\n\r\n          var childRelationship = { ID: fromID, relationship: relationship };\r\n          connectionMap.get(toID).children.push(childRelationship);\r\n        });\r\n      }\r\n\r\n      return connectionMap;\r\n    },\r\n\r\n    // Parse FBXTree.Objects.Video for embedded image data\r\n    // These images are connected to textures in FBXTree.Objects.Textures\r\n    // via FBXTree.Connections.\r\n    parseImages: function() {\r\n      var images = {};\r\n      var blobs = {};\r\n\r\n      if (\"Video\" in fbxTree.Objects) {\r\n        var videoNodes = fbxTree.Objects.Video;\r\n\r\n        for (var nodeID in videoNodes) {\r\n          var videoNode = videoNodes[nodeID];\r\n\r\n          var id = parseInt(nodeID);\r\n\r\n          images[id] = videoNode.RelativeFilename || videoNode.Filename;\r\n\r\n          // raw image data is in videoNode.Content\r\n          if (\"Content\" in videoNode) {\r\n            var arrayBufferContent =\r\n              videoNode.Content instanceof ArrayBuffer &&\r\n              videoNode.Content.byteLength > 0;\r\n            var base64Content =\r\n              typeof videoNode.Content === \"string\" && videoNode.Content !== \"\";\r\n\r\n            if (arrayBufferContent || base64Content) {\r\n              var image = this.parseImage(videoNodes[nodeID]);\r\n\r\n              blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      for (var id in images) {\r\n        var filename = images[id];\r\n\r\n        if (blobs[filename] !== undefined) images[id] = blobs[filename];\r\n        else images[id] = images[id].split(\"\\\\\").pop();\r\n      }\r\n\r\n      return images;\r\n    },\r\n\r\n    // Parse embedded image data in FBXTree.Video.Content\r\n    parseImage: function(videoNode) {\r\n      var content = videoNode.Content;\r\n      var fileName = videoNode.RelativeFilename || videoNode.Filename;\r\n      var extension = fileName\r\n        .slice(fileName.lastIndexOf(\".\") + 1)\r\n        .toLowerCase();\r\n\r\n      var type;\r\n\r\n      switch (extension) {\r\n        case \"bmp\":\r\n          type = \"image/bmp\";\r\n          break;\r\n\r\n        case \"jpg\":\r\n        case \"jpeg\":\r\n          type = \"image/jpeg\";\r\n          break;\r\n\r\n        case \"png\":\r\n          type = \"image/png\";\r\n          break;\r\n\r\n        case \"tif\":\r\n          type = \"image/tiff\";\r\n          break;\r\n\r\n        case \"tga\":\r\n          if (typeof THREE.TGALoader !== \"function\") {\r\n            console.warn(\r\n              \"FBXLoader: THREE.TGALoader is required to load TGA textures\"\r\n            );\r\n            return;\r\n          } else {\r\n            if (THREE.Loader.Handlers.get(\".tga\") === null) {\r\n              var tgaLoader = new THREE.TGALoader();\r\n              tgaLoader.setPath(this.textureLoader.path);\r\n\r\n              THREE.Loader.Handlers.add(/\\.tga$/i, tgaLoader);\r\n            }\r\n\r\n            type = \"image/tga\";\r\n            break;\r\n          }\r\n\r\n        default:\r\n          console.warn(\r\n            'FBXLoader: Image type \"' + extension + '\" is not supported.'\r\n          );\r\n          return;\r\n      }\r\n\r\n      if (typeof content === \"string\") {\r\n        // ASCII format\r\n\r\n        return \"data:\" + type + \";base64,\" + content;\r\n      } else {\r\n        // Binary Format\r\n\r\n        var array = new Uint8Array(content);\r\n        return window.URL.createObjectURL(new Blob([array], { type: type }));\r\n      }\r\n    },\r\n\r\n    // Parse nodes in FBXTree.Objects.Texture\r\n    // These contain details such as UV scaling, cropping, rotation etc and are connected\r\n    // to images in FBXTree.Objects.Video\r\n    parseTextures: function(images) {\r\n      var textureMap = new Map();\r\n\r\n      if (\"Texture\" in fbxTree.Objects) {\r\n        var textureNodes = fbxTree.Objects.Texture;\r\n        for (var nodeID in textureNodes) {\r\n          var texture = this.parseTexture(textureNodes[nodeID], images);\r\n          textureMap.set(parseInt(nodeID), texture);\r\n        }\r\n      }\r\n\r\n      return textureMap;\r\n    },\r\n\r\n    // Parse individual node in FBXTree.Objects.Texture\r\n    parseTexture: function(textureNode, images) {\r\n      var texture = this.loadTexture(textureNode, images);\r\n\r\n      texture.ID = textureNode.id;\r\n\r\n      texture.name = textureNode.attrName;\r\n\r\n      var wrapModeU = textureNode.WrapModeU;\r\n      var wrapModeV = textureNode.WrapModeV;\r\n\r\n      var valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\r\n      var valueV = wrapModeV !== undefined ? wrapModeV.value : 0;\r\n\r\n      // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\r\n      // 0: repeat(default), 1: clamp\r\n\r\n      texture.wrapS =\r\n        valueU === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\r\n      texture.wrapT =\r\n        valueV === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\r\n\r\n      if (\"Scaling\" in textureNode) {\r\n        var values = textureNode.Scaling.value;\r\n\r\n        texture.repeat.x = values[0];\r\n        texture.repeat.y = values[1];\r\n      }\r\n\r\n      return texture;\r\n    },\r\n\r\n    // load a texture specified as a blob or data URI, or via an external URL using THREE.TextureLoader\r\n    loadTexture: function(textureNode, images) {\r\n      var fileName;\r\n\r\n      var currentPath = this.textureLoader.path;\r\n\r\n      var children = connections.get(textureNode.id).children;\r\n\r\n      if (\r\n        children !== undefined &&\r\n        children.length > 0 &&\r\n        images[children[0].ID] !== undefined\r\n      ) {\r\n        fileName = images[children[0].ID];\r\n\r\n        if (\r\n          fileName.indexOf(\"blob:\") === 0 ||\r\n          fileName.indexOf(\"data:\") === 0\r\n        ) {\r\n          this.textureLoader.setPath(undefined);\r\n        }\r\n      }\r\n\r\n      var texture;\r\n\r\n      var extension = textureNode.FileName.slice(-3).toLowerCase();\r\n\r\n      if (extension === \"tga\") {\r\n        var loader = THREE.Loader.Handlers.get(\".tga\");\r\n\r\n        if (loader === null) {\r\n          console.warn(\r\n            \"FBXLoader: TGALoader not found, creating empty placeholder texture for\",\r\n            fileName\r\n          );\r\n          texture = new THREE.Texture();\r\n        } else {\r\n          texture = loader.load(fileName);\r\n        }\r\n      } else if (extension === \"psd\") {\r\n        console.warn(\r\n          \"FBXLoader: PSD textures are not supported, creating empty placeholder texture for\",\r\n          fileName\r\n        );\r\n        texture = new THREE.Texture();\r\n      } else {\r\n        texture = this.textureLoader.load(fileName);\r\n      }\r\n\r\n      this.textureLoader.setPath(currentPath);\r\n\r\n      return texture;\r\n    },\r\n\r\n    // Parse nodes in FBXTree.Objects.Material\r\n    parseMaterials: function(textureMap) {\r\n      var materialMap = new Map();\r\n\r\n      if (\"Material\" in fbxTree.Objects) {\r\n        var materialNodes = fbxTree.Objects.Material;\r\n\r\n        for (var nodeID in materialNodes) {\r\n          var material = this.parseMaterial(materialNodes[nodeID], textureMap);\r\n\r\n          if (material !== null) materialMap.set(parseInt(nodeID), material);\r\n        }\r\n      }\r\n\r\n      return materialMap;\r\n    },\r\n\r\n    // Parse single node in FBXTree.Objects.Material\r\n    // Materials are connected to texture maps in FBXTree.Objects.Textures\r\n    // FBX format currently only supports Lambert and Phong shading models\r\n    parseMaterial: function(materialNode, textureMap) {\r\n      var ID = materialNode.id;\r\n      var name = materialNode.attrName;\r\n      var type = materialNode.ShadingModel;\r\n\r\n      // Case where FBX wraps shading model in property object.\r\n      if (typeof type === \"object\") {\r\n        type = type.value;\r\n      }\r\n\r\n      // Ignore unused materials which don't have any connections.\r\n      if (!connections.has(ID)) return null;\r\n\r\n      var parameters = this.parseParameters(materialNode, textureMap, ID);\r\n\r\n      var material;\r\n\r\n      switch (type.toLowerCase()) {\r\n        case \"phong\":\r\n          material = new THREE.MeshPhongMaterial();\r\n          break;\r\n        case \"lambert\":\r\n          material = new THREE.MeshLambertMaterial();\r\n          break;\r\n        default:\r\n          console.warn(\r\n            'THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.',\r\n            type\r\n          );\r\n          material = new THREE.MeshPhongMaterial({ color: 0x3300ff });\r\n          break;\r\n      }\r\n\r\n      material.setValues(parameters);\r\n      material.name = name;\r\n\r\n      return material;\r\n    },\r\n\r\n    // Parse FBX material and return parameters suitable for a three.js material\r\n    // Also parse the texture map and return any textures associated with the material\r\n    parseParameters: function(materialNode, textureMap, ID) {\r\n      var parameters = {};\r\n\r\n      if (materialNode.BumpFactor) {\r\n        parameters.bumpScale = materialNode.BumpFactor.value;\r\n      }\r\n      if (materialNode.Diffuse) {\r\n        parameters.color = new THREE.Color().fromArray(\r\n          materialNode.Diffuse.value\r\n        );\r\n      } else if (\r\n        materialNode.DiffuseColor &&\r\n        materialNode.DiffuseColor.type === \"Color\"\r\n      ) {\r\n        // The blender exporter exports diffuse here instead of in materialNode.Diffuse\r\n        parameters.color = new THREE.Color().fromArray(\r\n          materialNode.DiffuseColor.value\r\n        );\r\n      }\r\n      if (materialNode.DisplacementFactor) {\r\n        parameters.displacementScale = materialNode.DisplacementFactor.value;\r\n      }\r\n      if (materialNode.Emissive) {\r\n        parameters.emissive = new THREE.Color().fromArray(\r\n          materialNode.Emissive.value\r\n        );\r\n      } else if (\r\n        materialNode.EmissiveColor &&\r\n        materialNode.EmissiveColor.type === \"Color\"\r\n      ) {\r\n        // The blender exporter exports emissive color here instead of in materialNode.Emissive\r\n        parameters.emissive = new THREE.Color().fromArray(\r\n          materialNode.EmissiveColor.value\r\n        );\r\n      }\r\n      if (materialNode.EmissiveFactor) {\r\n        parameters.emissiveIntensity = parseFloat(\r\n          materialNode.EmissiveFactor.value\r\n        );\r\n      }\r\n      if (materialNode.Opacity) {\r\n        parameters.opacity = parseFloat(materialNode.Opacity.value);\r\n      }\r\n      if (parameters.opacity < 1.0) {\r\n        parameters.transparent = true;\r\n      }\r\n      if (materialNode.ReflectionFactor) {\r\n        parameters.reflectivity = materialNode.ReflectionFactor.value;\r\n      }\r\n      if (materialNode.Shininess) {\r\n        parameters.shininess = materialNode.Shininess.value;\r\n      }\r\n      if (materialNode.Specular) {\r\n        parameters.specular = new THREE.Color().fromArray(\r\n          materialNode.Specular.value\r\n        );\r\n      } else if (\r\n        materialNode.SpecularColor &&\r\n        materialNode.SpecularColor.type === \"Color\"\r\n      ) {\r\n        // The blender exporter exports specular color here instead of in materialNode.Specular\r\n        parameters.specular = new THREE.Color().fromArray(\r\n          materialNode.SpecularColor.value\r\n        );\r\n      }\r\n\r\n      var self = this;\r\n      connections.get(ID).children.forEach(function(child) {\r\n        var type = child.relationship;\r\n\r\n        switch (type) {\r\n          case \"Bump\":\r\n            parameters.bumpMap = self.getTexture(textureMap, child.ID);\r\n            break;\r\n\r\n          case \"DiffuseColor\":\r\n            parameters.map = self.getTexture(textureMap, child.ID);\r\n            break;\r\n\r\n          case \"DisplacementColor\":\r\n            parameters.displacementMap = self.getTexture(textureMap, child.ID);\r\n            break;\r\n\r\n          case \"EmissiveColor\":\r\n            parameters.emissiveMap = self.getTexture(textureMap, child.ID);\r\n            break;\r\n\r\n          case \"NormalMap\":\r\n            parameters.normalMap = self.getTexture(textureMap, child.ID);\r\n            break;\r\n\r\n          case \"ReflectionColor\":\r\n            parameters.envMap = self.getTexture(textureMap, child.ID);\r\n            parameters.envMap.mapping = THREE.EquirectangularReflectionMapping;\r\n            break;\r\n\r\n          case \"SpecularColor\":\r\n            parameters.specularMap = self.getTexture(textureMap, child.ID);\r\n            break;\r\n\r\n          case \"TransparentColor\":\r\n            parameters.alphaMap = self.getTexture(textureMap, child.ID);\r\n            parameters.transparent = true;\r\n            break;\r\n\r\n          case \"AmbientColor\":\r\n          case \"ShininessExponent\": // AKA glossiness map\r\n          case \"SpecularFactor\": // AKA specularLevel\r\n          case \"VectorDisplacementColor\": // NOTE: Seems to be a copy of DisplacementColor\r\n          default:\r\n            console.warn(\r\n              \"THREE.FBXLoader: %s map is not supported in three.js, skipping texture.\",\r\n              type\r\n            );\r\n            break;\r\n        }\r\n      });\r\n\r\n      return parameters;\r\n    },\r\n\r\n    // get a texture from the textureMap for use by a material.\r\n    getTexture: function(textureMap, id) {\r\n      // if the texture is a layered texture, just use the first layer and issue a warning\r\n      if (\r\n        \"LayeredTexture\" in fbxTree.Objects &&\r\n        id in fbxTree.Objects.LayeredTexture\r\n      ) {\r\n        console.warn(\r\n          \"THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.\"\r\n        );\r\n        id = connections.get(id).children[0].ID;\r\n      }\r\n\r\n      return textureMap.get(id);\r\n    },\r\n\r\n    // Parse nodes in FBXTree.Objects.Deformer\r\n    // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\r\n    // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\r\n    parseDeformers: function() {\r\n      var skeletons = {};\r\n      var morphTargets = {};\r\n\r\n      if (\"Deformer\" in fbxTree.Objects) {\r\n        var DeformerNodes = fbxTree.Objects.Deformer;\r\n\r\n        for (var nodeID in DeformerNodes) {\r\n          var deformerNode = DeformerNodes[nodeID];\r\n\r\n          var relationships = connections.get(parseInt(nodeID));\r\n\r\n          if (deformerNode.attrType === \"Skin\") {\r\n            var skeleton = this.parseSkeleton(relationships, DeformerNodes);\r\n            skeleton.ID = nodeID;\r\n\r\n            if (relationships.parents.length > 1)\r\n              console.warn(\r\n                \"THREE.FBXLoader: skeleton attached to more than one geometry is not supported.\"\r\n              );\r\n            skeleton.geometryID = relationships.parents[0].ID;\r\n\r\n            skeletons[nodeID] = skeleton;\r\n          } else if (deformerNode.attrType === \"BlendShape\") {\r\n            var morphTarget = {\r\n              id: nodeID\r\n            };\r\n\r\n            morphTarget.rawTargets = this.parseMorphTargets(\r\n              relationships,\r\n              DeformerNodes\r\n            );\r\n            morphTarget.id = nodeID;\r\n\r\n            if (relationships.parents.length > 1)\r\n              console.warn(\r\n                \"THREE.FBXLoader: morph target attached to more than one geometry is not supported.\"\r\n              );\r\n\r\n            morphTargets[nodeID] = morphTarget;\r\n          }\r\n        }\r\n      }\r\n\r\n      return {\r\n        skeletons: skeletons,\r\n        morphTargets: morphTargets\r\n      };\r\n    },\r\n\r\n    // Parse single nodes in FBXTree.Objects.Deformer\r\n    // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\r\n    // Each skin node represents a skeleton and each cluster node represents a bone\r\n    parseSkeleton: function(relationships, deformerNodes) {\r\n      var rawBones = [];\r\n\r\n      relationships.children.forEach(function(child) {\r\n        var boneNode = deformerNodes[child.ID];\r\n\r\n        if (boneNode.attrType !== \"Cluster\") return;\r\n\r\n        var rawBone = {\r\n          ID: child.ID,\r\n          indices: [],\r\n          weights: [],\r\n          transformLink: new THREE.Matrix4().fromArray(boneNode.TransformLink.a)\r\n          // transform: new THREE.Matrix4().fromArray( boneNode.Transform.a ),\r\n          // linkMode: boneNode.Mode,\r\n        };\r\n\r\n        if (\"Indexes\" in boneNode) {\r\n          rawBone.indices = boneNode.Indexes.a;\r\n          rawBone.weights = boneNode.Weights.a;\r\n        }\r\n\r\n        rawBones.push(rawBone);\r\n      });\r\n\r\n      return {\r\n        rawBones: rawBones,\r\n        bones: []\r\n      };\r\n    },\r\n\r\n    // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\r\n    parseMorphTargets: function(relationships, deformerNodes) {\r\n      var rawMorphTargets = [];\r\n\r\n      for (var i = 0; i < relationships.children.length; i++) {\r\n        var child = relationships.children[i];\r\n\r\n        var morphTargetNode = deformerNodes[child.ID];\r\n\r\n        var rawMorphTarget = {\r\n          name: morphTargetNode.attrName,\r\n          initialWeight: morphTargetNode.DeformPercent,\r\n          id: morphTargetNode.id,\r\n          fullWeights: morphTargetNode.FullWeights.a\r\n        };\r\n\r\n        if (morphTargetNode.attrType !== \"BlendShapeChannel\") return;\r\n\r\n        rawMorphTarget.geoID = connections\r\n          .get(parseInt(child.ID))\r\n          .children.filter(function(child) {\r\n            return child.relationship === undefined;\r\n          })[0].ID;\r\n\r\n        rawMorphTargets.push(rawMorphTarget);\r\n      }\r\n\r\n      return rawMorphTargets;\r\n    },\r\n\r\n    // create the main THREE.Group() to be returned by the loader\r\n    parseScene: function(deformers, geometryMap, materialMap) {\r\n      sceneGraph = new THREE.Group();\r\n\r\n      var modelMap = this.parseModels(\r\n        deformers.skeletons,\r\n        geometryMap,\r\n        materialMap\r\n      );\r\n\r\n      var modelNodes = fbxTree.Objects.Model;\r\n\r\n      var self = this;\r\n      modelMap.forEach(function(model) {\r\n        var modelNode = modelNodes[model.ID];\r\n        self.setLookAtProperties(model, modelNode);\r\n\r\n        var parentConnections = connections.get(model.ID).parents;\r\n\r\n        parentConnections.forEach(function(connection) {\r\n          var parent = modelMap.get(connection.ID);\r\n          if (parent !== undefined) parent.add(model);\r\n        });\r\n\r\n        if (model.parent === null) {\r\n          sceneGraph.add(model);\r\n        }\r\n      });\r\n\r\n      this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\r\n\r\n      this.createAmbientLight();\r\n\r\n      this.setupMorphMaterials();\r\n\r\n      sceneGraph.traverse(function(node) {\r\n        if (node.userData.transformData) {\r\n          if (node.parent)\r\n            node.userData.transformData.parentMatrixWorld = node.parent.matrix;\r\n\r\n          var transform = generateTransform(node.userData.transformData);\r\n\r\n          node.applyMatrix(transform);\r\n        }\r\n      });\r\n\r\n      var animations = new AnimationParser().parse();\r\n\r\n      // if all the models where already combined in a single group, just return that\r\n      if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\r\n        sceneGraph.children[0].animations = animations;\r\n        sceneGraph = sceneGraph.children[0];\r\n      }\r\n\r\n      sceneGraph.animations = animations;\r\n    },\r\n\r\n    // parse nodes in FBXTree.Objects.Model\r\n    parseModels: function(skeletons, geometryMap, materialMap) {\r\n      var modelMap = new Map();\r\n      var modelNodes = fbxTree.Objects.Model;\r\n\r\n      for (var nodeID in modelNodes) {\r\n        var id = parseInt(nodeID);\r\n        var node = modelNodes[nodeID];\r\n        var relationships = connections.get(id);\r\n\r\n        var model = this.buildSkeleton(\r\n          relationships,\r\n          skeletons,\r\n          id,\r\n          node.attrName\r\n        );\r\n\r\n        if (!model) {\r\n          switch (node.attrType) {\r\n            case \"Camera\":\r\n              model = this.createCamera(relationships);\r\n              break;\r\n            case \"Light\":\r\n              model = this.createLight(relationships);\r\n              break;\r\n            case \"Mesh\":\r\n              model = this.createMesh(relationships, geometryMap, materialMap);\r\n              break;\r\n            case \"NurbsCurve\":\r\n              model = this.createCurve(relationships, geometryMap);\r\n              break;\r\n            case \"LimbNode\":\r\n            case \"Root\":\r\n              model = new THREE.Bone();\r\n              break;\r\n            case \"Null\":\r\n            default:\r\n              model = new THREE.Group();\r\n              break;\r\n          }\r\n\r\n          model.name = THREE.PropertyBinding.sanitizeNodeName(node.attrName);\r\n          model.ID = id;\r\n        }\r\n\r\n        this.getTransformData(model, node);\r\n        modelMap.set(id, model);\r\n      }\r\n\r\n      return modelMap;\r\n    },\r\n\r\n    buildSkeleton: function(relationships, skeletons, id, name) {\r\n      var bone = null;\r\n\r\n      relationships.parents.forEach(function(parent) {\r\n        for (var ID in skeletons) {\r\n          var skeleton = skeletons[ID];\r\n\r\n          skeleton.rawBones.forEach(function(rawBone, i) {\r\n            if (rawBone.ID === parent.ID) {\r\n              var subBone = bone;\r\n              bone = new THREE.Bone();\r\n\r\n              bone.matrixWorld.copy(rawBone.transformLink);\r\n\r\n              // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\r\n              bone.name = THREE.PropertyBinding.sanitizeNodeName(name);\r\n              bone.ID = id;\r\n\r\n              skeleton.bones[i] = bone;\r\n\r\n              // In cases where a bone is shared between multiple meshes\r\n              // duplicate the bone here and and it as a child of the first bone\r\n              if (subBone !== null) {\r\n                bone.add(subBone);\r\n              }\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      return bone;\r\n    },\r\n\r\n    // create a THREE.PerspectiveCamera or THREE.OrthographicCamera\r\n    createCamera: function(relationships) {\r\n      var model;\r\n      var cameraAttribute;\r\n\r\n      relationships.children.forEach(function(child) {\r\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\r\n\r\n        if (attr !== undefined) {\r\n          cameraAttribute = attr;\r\n        }\r\n      });\r\n\r\n      if (cameraAttribute === undefined) {\r\n        model = new THREE.Object3D();\r\n      } else {\r\n        var type = 0;\r\n        if (\r\n          cameraAttribute.CameraProjectionType !== undefined &&\r\n          cameraAttribute.CameraProjectionType.value === 1\r\n        ) {\r\n          type = 1;\r\n        }\r\n\r\n        var nearClippingPlane = 1;\r\n        if (cameraAttribute.NearPlane !== undefined) {\r\n          nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\r\n        }\r\n\r\n        var farClippingPlane = 1000;\r\n        if (cameraAttribute.FarPlane !== undefined) {\r\n          farClippingPlane = cameraAttribute.FarPlane.value / 1000;\r\n        }\r\n\r\n        var width = window.innerWidth;\r\n        var height = window.innerHeight;\r\n\r\n        if (\r\n          cameraAttribute.AspectWidth !== undefined &&\r\n          cameraAttribute.AspectHeight !== undefined\r\n        ) {\r\n          width = cameraAttribute.AspectWidth.value;\r\n          height = cameraAttribute.AspectHeight.value;\r\n        }\r\n\r\n        var aspect = width / height;\r\n\r\n        var fov = 45;\r\n        if (cameraAttribute.FieldOfView !== undefined) {\r\n          fov = cameraAttribute.FieldOfView.value;\r\n        }\r\n\r\n        var focalLength = cameraAttribute.FocalLength\r\n          ? cameraAttribute.FocalLength.value\r\n          : null;\r\n\r\n        switch (type) {\r\n          case 0: // Perspective\r\n            model = new THREE.PerspectiveCamera(\r\n              fov,\r\n              aspect,\r\n              nearClippingPlane,\r\n              farClippingPlane\r\n            );\r\n            if (focalLength !== null) model.setFocalLength(focalLength);\r\n            break;\r\n\r\n          case 1: // Orthographic\r\n            model = new THREE.OrthographicCamera(\r\n              -width / 2,\r\n              width / 2,\r\n              height / 2,\r\n              -height / 2,\r\n              nearClippingPlane,\r\n              farClippingPlane\r\n            );\r\n            break;\r\n\r\n          default:\r\n            console.warn(\"THREE.FBXLoader: Unknown camera type \" + type + \".\");\r\n            model = new THREE.Object3D();\r\n            break;\r\n        }\r\n      }\r\n\r\n      return model;\r\n    },\r\n\r\n    // Create a THREE.DirectionalLight, THREE.PointLight or THREE.SpotLight\r\n    createLight: function(relationships) {\r\n      var model;\r\n      var lightAttribute;\r\n\r\n      relationships.children.forEach(function(child) {\r\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\r\n\r\n        if (attr !== undefined) {\r\n          lightAttribute = attr;\r\n        }\r\n      });\r\n\r\n      if (lightAttribute === undefined) {\r\n        model = new THREE.Object3D();\r\n      } else {\r\n        var type;\r\n\r\n        // LightType can be undefined for Point lights\r\n        if (lightAttribute.LightType === undefined) {\r\n          type = 0;\r\n        } else {\r\n          type = lightAttribute.LightType.value;\r\n        }\r\n\r\n        var color = 0xffffff;\r\n\r\n        if (lightAttribute.Color !== undefined) {\r\n          color = new THREE.Color().fromArray(lightAttribute.Color.value);\r\n        }\r\n\r\n        var intensity =\r\n          lightAttribute.Intensity === undefined\r\n            ? 1\r\n            : lightAttribute.Intensity.value / 100;\r\n\r\n        // light disabled\r\n        if (\r\n          lightAttribute.CastLightOnObject !== undefined &&\r\n          lightAttribute.CastLightOnObject.value === 0\r\n        ) {\r\n          intensity = 0;\r\n        }\r\n\r\n        var distance = 0;\r\n        if (lightAttribute.FarAttenuationEnd !== undefined) {\r\n          if (\r\n            lightAttribute.EnableFarAttenuation !== undefined &&\r\n            lightAttribute.EnableFarAttenuation.value === 0\r\n          ) {\r\n            distance = 0;\r\n          } else {\r\n            distance = lightAttribute.FarAttenuationEnd.value;\r\n          }\r\n        }\r\n\r\n        // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\r\n        var decay = 1;\r\n\r\n        switch (type) {\r\n          case 0: // Point\r\n            model = new THREE.PointLight(color, intensity, distance, decay);\r\n            break;\r\n\r\n          case 1: // Directional\r\n            model = new THREE.DirectionalLight(color, intensity);\r\n            break;\r\n\r\n          case 2: // Spot\r\n            var angle = Math.PI / 3;\r\n\r\n            if (lightAttribute.InnerAngle !== undefined) {\r\n              angle = THREE.Math.degToRad(lightAttribute.InnerAngle.value);\r\n            }\r\n\r\n            var penumbra = 0;\r\n            if (lightAttribute.OuterAngle !== undefined) {\r\n              // TODO: this is not correct - FBX calculates outer and inner angle in degrees\r\n              // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\r\n              // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\r\n              penumbra = THREE.Math.degToRad(lightAttribute.OuterAngle.value);\r\n              penumbra = Math.max(penumbra, 1);\r\n            }\r\n\r\n            model = new THREE.SpotLight(\r\n              color,\r\n              intensity,\r\n              distance,\r\n              angle,\r\n              penumbra,\r\n              decay\r\n            );\r\n            break;\r\n\r\n          default:\r\n            console.warn(\r\n              \"THREE.FBXLoader: Unknown light type \" +\r\n                lightAttribute.LightType.value +\r\n                \", defaulting to a THREE.PointLight.\"\r\n            );\r\n            model = new THREE.PointLight(color, intensity);\r\n            break;\r\n        }\r\n\r\n        if (\r\n          lightAttribute.CastShadows !== undefined &&\r\n          lightAttribute.CastShadows.value === 1\r\n        ) {\r\n          model.castShadow = true;\r\n        }\r\n      }\r\n\r\n      return model;\r\n    },\r\n\r\n    createMesh: function(relationships, geometryMap, materialMap) {\r\n      var model;\r\n      var geometry = null;\r\n      var material = null;\r\n      var materials = [];\r\n\r\n      // get geometry and materials(s) from connections\r\n      relationships.children.forEach(function(child) {\r\n        if (geometryMap.has(child.ID)) {\r\n          geometry = geometryMap.get(child.ID);\r\n        }\r\n\r\n        if (materialMap.has(child.ID)) {\r\n          materials.push(materialMap.get(child.ID));\r\n        }\r\n      });\r\n\r\n      if (materials.length > 1) {\r\n        material = materials;\r\n      } else if (materials.length > 0) {\r\n        material = materials[0];\r\n      } else {\r\n        material = new THREE.MeshPhongMaterial({ color: 0xcccccc });\r\n        materials.push(material);\r\n      }\r\n\r\n      if (\"color\" in geometry.attributes) {\r\n        materials.forEach(function(material) {\r\n          material.vertexColors = THREE.VertexColors;\r\n        });\r\n      }\r\n\r\n      if (geometry.FBX_Deformer) {\r\n        materials.forEach(function(material) {\r\n          material.skinning = true;\r\n        });\r\n\r\n        model = new THREE.SkinnedMesh(geometry, material);\r\n        model.normalizeSkinWeights();\r\n      } else {\r\n        model = new THREE.Mesh(geometry, material);\r\n      }\r\n\r\n      return model;\r\n    },\r\n\r\n    createCurve: function(relationships, geometryMap) {\r\n      var geometry = relationships.children.reduce(function(geo, child) {\r\n        if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\r\n\r\n        return geo;\r\n      }, null);\r\n\r\n      // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\r\n      var material = new THREE.LineBasicMaterial({\r\n        color: 0x3300ff,\r\n        linewidth: 1\r\n      });\r\n      return new THREE.Line(geometry, material);\r\n    },\r\n\r\n    // parse the model node for transform data\r\n    getTransformData: function(model, modelNode) {\r\n      var transformData = {};\r\n\r\n      if (\"InheritType\" in modelNode)\r\n        transformData.inheritType = parseInt(modelNode.InheritType.value);\r\n\r\n      if (\"RotationOrder\" in modelNode)\r\n        transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\r\n      else transformData.eulerOrder = \"ZYX\";\r\n\r\n      if (\"Lcl_Translation\" in modelNode)\r\n        transformData.translation = modelNode.Lcl_Translation.value;\r\n\r\n      if (\"PreRotation\" in modelNode)\r\n        transformData.preRotation = modelNode.PreRotation.value;\r\n      if (\"Lcl_Rotation\" in modelNode)\r\n        transformData.rotation = modelNode.Lcl_Rotation.value;\r\n      if (\"PostRotation\" in modelNode)\r\n        transformData.postRotation = modelNode.PostRotation.value;\r\n\r\n      if (\"Lcl_Scaling\" in modelNode)\r\n        transformData.scale = modelNode.Lcl_Scaling.value;\r\n\r\n      if (\"ScalingOffset\" in modelNode)\r\n        transformData.scalingOffset = modelNode.ScalingOffset.value;\r\n      if (\"ScalingPivot\" in modelNode)\r\n        transformData.scalingPivot = modelNode.ScalingPivot.value;\r\n\r\n      if (\"RotationOffset\" in modelNode)\r\n        transformData.rotationOffset = modelNode.RotationOffset.value;\r\n      if (\"RotationPivot\" in modelNode)\r\n        transformData.rotationPivot = modelNode.RotationPivot.value;\r\n\r\n      model.userData.transformData = transformData;\r\n    },\r\n\r\n    setLookAtProperties: function(model, modelNode) {\r\n      if (\"LookAtProperty\" in modelNode) {\r\n        var children = connections.get(model.ID).children;\r\n\r\n        children.forEach(function(child) {\r\n          if (child.relationship === \"LookAtProperty\") {\r\n            var lookAtTarget = fbxTree.Objects.Model[child.ID];\r\n\r\n            if (\"Lcl_Translation\" in lookAtTarget) {\r\n              var pos = lookAtTarget.Lcl_Translation.value;\r\n\r\n              // DirectionalLight, SpotLight\r\n              if (model.target !== undefined) {\r\n                model.target.position.fromArray(pos);\r\n                sceneGraph.add(model.target);\r\n              } else {\r\n                // Cameras and other Object3Ds\r\n\r\n                model.lookAt(new THREE.Vector3().fromArray(pos));\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    },\r\n\r\n    bindSkeleton: function(skeletons, geometryMap, modelMap) {\r\n      var bindMatrices = this.parsePoseNodes();\r\n\r\n      for (var ID in skeletons) {\r\n        var skeleton = skeletons[ID];\r\n\r\n        var parents = connections.get(parseInt(skeleton.ID)).parents;\r\n\r\n        parents.forEach(function(parent) {\r\n          if (geometryMap.has(parent.ID)) {\r\n            var geoID = parent.ID;\r\n            var geoRelationships = connections.get(geoID);\r\n\r\n            geoRelationships.parents.forEach(function(geoConnParent) {\r\n              if (modelMap.has(geoConnParent.ID)) {\r\n                var model = modelMap.get(geoConnParent.ID);\r\n\r\n                model.bind(\r\n                  new THREE.Skeleton(skeleton.bones),\r\n                  bindMatrices[geoConnParent.ID]\r\n                );\r\n              }\r\n            });\r\n          }\r\n        });\r\n      }\r\n    },\r\n\r\n    parsePoseNodes: function() {\r\n      var bindMatrices = {};\r\n\r\n      if (\"Pose\" in fbxTree.Objects) {\r\n        var BindPoseNode = fbxTree.Objects.Pose;\r\n\r\n        for (var nodeID in BindPoseNode) {\r\n          if (BindPoseNode[nodeID].attrType === \"BindPose\") {\r\n            var poseNodes = BindPoseNode[nodeID].PoseNode;\r\n\r\n            if (Array.isArray(poseNodes)) {\r\n              poseNodes.forEach(function(poseNode) {\r\n                bindMatrices[poseNode.Node] = new THREE.Matrix4().fromArray(\r\n                  poseNode.Matrix.a\r\n                );\r\n              });\r\n            } else {\r\n              bindMatrices[poseNodes.Node] = new THREE.Matrix4().fromArray(\r\n                poseNodes.Matrix.a\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return bindMatrices;\r\n    },\r\n\r\n    // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\r\n    createAmbientLight: function() {\r\n      if (\r\n        \"GlobalSettings\" in fbxTree &&\r\n        \"AmbientColor\" in fbxTree.GlobalSettings\r\n      ) {\r\n        var ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\r\n        var r = ambientColor[0];\r\n        var g = ambientColor[1];\r\n        var b = ambientColor[2];\r\n\r\n        if (r !== 0 || g !== 0 || b !== 0) {\r\n          var color = new THREE.Color(r, g, b);\r\n          sceneGraph.add(new THREE.AmbientLight(color, 1));\r\n        }\r\n      }\r\n    },\r\n\r\n    setupMorphMaterials: function() {\r\n      var self = this;\r\n      sceneGraph.traverse(function(child) {\r\n        if (child.isMesh) {\r\n          if (\r\n            child.geometry.morphAttributes.position &&\r\n            child.geometry.morphAttributes.position.length\r\n          ) {\r\n            if (Array.isArray(child.material)) {\r\n              child.material.forEach(function(material, i) {\r\n                self.setupMorphMaterial(child, material, i);\r\n              });\r\n            } else {\r\n              self.setupMorphMaterial(child, child.material);\r\n            }\r\n          }\r\n        }\r\n      });\r\n    },\r\n\r\n    setupMorphMaterial: function(child, material, index) {\r\n      var uuid = child.uuid;\r\n      var matUuid = material.uuid;\r\n\r\n      // if a geometry has morph targets, it cannot share the material with other geometries\r\n      var sharedMat = false;\r\n\r\n      sceneGraph.traverse(function(node) {\r\n        if (node.isMesh) {\r\n          if (Array.isArray(node.material)) {\r\n            node.material.forEach(function(mat) {\r\n              if (mat.uuid === matUuid && node.uuid !== uuid) sharedMat = true;\r\n            });\r\n          } else if (node.material.uuid === matUuid && node.uuid !== uuid)\r\n            sharedMat = true;\r\n        }\r\n      });\r\n\r\n      if (sharedMat === true) {\r\n        var clonedMat = material.clone();\r\n        clonedMat.morphTargets = true;\r\n\r\n        if (index === undefined) child.material = clonedMat;\r\n        else child.material[index] = clonedMat;\r\n      } else material.morphTargets = true;\r\n    }\r\n  };\r\n\r\n  // parse Geometry data from FBXTree and return map of BufferGeometries\r\n  function GeometryParser() {}\r\n\r\n  GeometryParser.prototype = {\r\n    constructor: GeometryParser,\r\n\r\n    // Parse nodes in FBXTree.Objects.Geometry\r\n    parse: function(deformers) {\r\n      var geometryMap = new Map();\r\n\r\n      if (\"Geometry\" in fbxTree.Objects) {\r\n        var geoNodes = fbxTree.Objects.Geometry;\r\n\r\n        for (var nodeID in geoNodes) {\r\n          var relationships = connections.get(parseInt(nodeID));\r\n          var geo = this.parseGeometry(\r\n            relationships,\r\n            geoNodes[nodeID],\r\n            deformers\r\n          );\r\n\r\n          geometryMap.set(parseInt(nodeID), geo);\r\n        }\r\n      }\r\n\r\n      return geometryMap;\r\n    },\r\n\r\n    // Parse single node in FBXTree.Objects.Geometry\r\n    parseGeometry: function(relationships, geoNode, deformers) {\r\n      switch (geoNode.attrType) {\r\n        case \"Mesh\":\r\n          return this.parseMeshGeometry(relationships, geoNode, deformers);\r\n          break;\r\n\r\n        case \"NurbsCurve\":\r\n          return this.parseNurbsGeometry(geoNode);\r\n          break;\r\n      }\r\n    },\r\n\r\n    // Parse single node mesh geometry in FBXTree.Objects.Geometry\r\n    parseMeshGeometry: function(relationships, geoNode, deformers) {\r\n      var skeletons = deformers.skeletons;\r\n      var morphTargets = deformers.morphTargets;\r\n\r\n      var modelNodes = relationships.parents.map(function(parent) {\r\n        return fbxTree.Objects.Model[parent.ID];\r\n      });\r\n\r\n      // don't create geometry if it is not associated with any models\r\n      if (modelNodes.length === 0) return;\r\n\r\n      var skeleton = relationships.children.reduce(function(skeleton, child) {\r\n        if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\r\n\r\n        return skeleton;\r\n      }, null);\r\n\r\n      var morphTarget = relationships.children.reduce(function(\r\n        morphTarget,\r\n        child\r\n      ) {\r\n        if (morphTargets[child.ID] !== undefined)\r\n          morphTarget = morphTargets[child.ID];\r\n\r\n        return morphTarget;\r\n      },\r\n      null);\r\n\r\n      // Assume one model and get the preRotation from that\r\n      // if there is more than one model associated with the geometry this may cause problems\r\n      var modelNode = modelNodes[0];\r\n\r\n      var transformData = {};\r\n\r\n      if (\"RotationOrder\" in modelNode)\r\n        transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\r\n      if (\"InheritType\" in modelNode)\r\n        transformData.inheritType = parseInt(modelNode.InheritType.value);\r\n\r\n      if (\"GeometricTranslation\" in modelNode)\r\n        transformData.translation = modelNode.GeometricTranslation.value;\r\n      if (\"GeometricRotation\" in modelNode)\r\n        transformData.rotation = modelNode.GeometricRotation.value;\r\n      if (\"GeometricScaling\" in modelNode)\r\n        transformData.scale = modelNode.GeometricScaling.value;\r\n\r\n      var transform = generateTransform(transformData);\r\n\r\n      return this.genGeometry(geoNode, skeleton, morphTarget, transform);\r\n    },\r\n\r\n    // Generate a THREE.BufferGeometry from a node in FBXTree.Objects.Geometry\r\n    genGeometry: function(geoNode, skeleton, morphTarget, preTransform) {\r\n      var geo = new THREE.BufferGeometry();\r\n      if (geoNode.attrName) geo.name = geoNode.attrName;\r\n\r\n      var geoInfo = this.parseGeoNode(geoNode, skeleton);\r\n      var buffers = this.genBuffers(geoInfo);\r\n\r\n      var positionAttribute = new THREE.Float32BufferAttribute(\r\n        buffers.vertex,\r\n        3\r\n      );\r\n\r\n      preTransform.applyToBufferAttribute(positionAttribute);\r\n\r\n      geo.addAttribute(\"position\", positionAttribute);\r\n\r\n      if (buffers.colors.length > 0) {\r\n        geo.addAttribute(\r\n          \"color\",\r\n          new THREE.Float32BufferAttribute(buffers.colors, 3)\r\n        );\r\n      }\r\n\r\n      if (skeleton) {\r\n        geo.addAttribute(\r\n          \"skinIndex\",\r\n          new THREE.Uint16BufferAttribute(buffers.weightsIndices, 4)\r\n        );\r\n\r\n        geo.addAttribute(\r\n          \"skinWeight\",\r\n          new THREE.Float32BufferAttribute(buffers.vertexWeights, 4)\r\n        );\r\n\r\n        // used later to bind the skeleton to the model\r\n        geo.FBX_Deformer = skeleton;\r\n      }\r\n\r\n      if (buffers.normal.length > 0) {\r\n        var normalAttribute = new THREE.Float32BufferAttribute(\r\n          buffers.normal,\r\n          3\r\n        );\r\n\r\n        var normalMatrix = new THREE.Matrix3().getNormalMatrix(preTransform);\r\n        normalMatrix.applyToBufferAttribute(normalAttribute);\r\n\r\n        geo.addAttribute(\"normal\", normalAttribute);\r\n      }\r\n\r\n      buffers.uvs.forEach(function(uvBuffer, i) {\r\n        // subsequent uv buffers are called 'uv1', 'uv2', ...\r\n        var name = \"uv\" + (i + 1).toString();\r\n\r\n        // the first uv buffer is just called 'uv'\r\n        if (i === 0) {\r\n          name = \"uv\";\r\n        }\r\n\r\n        geo.addAttribute(\r\n          name,\r\n          new THREE.Float32BufferAttribute(buffers.uvs[i], 2)\r\n        );\r\n      });\r\n\r\n      if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\r\n        // Convert the material indices of each vertex into rendering groups on the geometry.\r\n        var prevMaterialIndex = buffers.materialIndex[0];\r\n        var startIndex = 0;\r\n\r\n        buffers.materialIndex.forEach(function(currentIndex, i) {\r\n          if (currentIndex !== prevMaterialIndex) {\r\n            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\r\n\r\n            prevMaterialIndex = currentIndex;\r\n            startIndex = i;\r\n          }\r\n        });\r\n\r\n        // the loop above doesn't add the last group, do that here.\r\n        if (geo.groups.length > 0) {\r\n          var lastGroup = geo.groups[geo.groups.length - 1];\r\n          var lastIndex = lastGroup.start + lastGroup.count;\r\n\r\n          if (lastIndex !== buffers.materialIndex.length) {\r\n            geo.addGroup(\r\n              lastIndex,\r\n              buffers.materialIndex.length - lastIndex,\r\n              prevMaterialIndex\r\n            );\r\n          }\r\n        }\r\n\r\n        // case where there are multiple materials but the whole geometry is only\r\n        // using one of them\r\n        if (geo.groups.length === 0) {\r\n          geo.addGroup(\r\n            0,\r\n            buffers.materialIndex.length,\r\n            buffers.materialIndex[0]\r\n          );\r\n        }\r\n      }\r\n\r\n      this.addMorphTargets(geo, geoNode, morphTarget, preTransform);\r\n\r\n      return geo;\r\n    },\r\n\r\n    parseGeoNode: function(geoNode, skeleton) {\r\n      var geoInfo = {};\r\n\r\n      geoInfo.vertexPositions =\r\n        geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\r\n      geoInfo.vertexIndices =\r\n        geoNode.PolygonVertexIndex !== undefined\r\n          ? geoNode.PolygonVertexIndex.a\r\n          : [];\r\n\r\n      if (geoNode.LayerElementColor) {\r\n        geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\r\n      }\r\n\r\n      if (geoNode.LayerElementMaterial) {\r\n        geoInfo.material = this.parseMaterialIndices(\r\n          geoNode.LayerElementMaterial[0]\r\n        );\r\n      }\r\n\r\n      if (geoNode.LayerElementNormal) {\r\n        geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\r\n      }\r\n\r\n      if (geoNode.LayerElementUV) {\r\n        geoInfo.uv = [];\r\n\r\n        var i = 0;\r\n        while (geoNode.LayerElementUV[i]) {\r\n          geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\r\n          i++;\r\n        }\r\n      }\r\n\r\n      geoInfo.weightTable = {};\r\n\r\n      if (skeleton !== null) {\r\n        geoInfo.skeleton = skeleton;\r\n\r\n        skeleton.rawBones.forEach(function(rawBone, i) {\r\n          // loop over the bone's vertex indices and weights\r\n          rawBone.indices.forEach(function(index, j) {\r\n            if (geoInfo.weightTable[index] === undefined)\r\n              geoInfo.weightTable[index] = [];\r\n\r\n            geoInfo.weightTable[index].push({\r\n              id: i,\r\n              weight: rawBone.weights[j]\r\n            });\r\n          });\r\n        });\r\n      }\r\n\r\n      return geoInfo;\r\n    },\r\n\r\n    genBuffers: function(geoInfo) {\r\n      var buffers = {\r\n        vertex: [],\r\n        normal: [],\r\n        colors: [],\r\n        uvs: [],\r\n        materialIndex: [],\r\n        vertexWeights: [],\r\n        weightsIndices: []\r\n      };\r\n\r\n      var polygonIndex = 0;\r\n      var faceLength = 0;\r\n      var displayedWeightsWarning = false;\r\n\r\n      // these will hold data for a single face\r\n      var facePositionIndexes = [];\r\n      var faceNormals = [];\r\n      var faceColors = [];\r\n      var faceUVs = [];\r\n      var faceWeights = [];\r\n      var faceWeightIndices = [];\r\n\r\n      var self = this;\r\n      geoInfo.vertexIndices.forEach(function(vertexIndex, polygonVertexIndex) {\r\n        var endOfFace = false;\r\n\r\n        // Face index and vertex index arrays are combined in a single array\r\n        // A cube with quad faces looks like this:\r\n        // PolygonVertexIndex: *24 {\r\n        //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\r\n        //  }\r\n        // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\r\n        // to find index of last vertex bit shift the index: ^ - 1\r\n        if (vertexIndex < 0) {\r\n          vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\r\n          endOfFace = true;\r\n        }\r\n\r\n        var weightIndices = [];\r\n        var weights = [];\r\n\r\n        facePositionIndexes.push(\r\n          vertexIndex * 3,\r\n          vertexIndex * 3 + 1,\r\n          vertexIndex * 3 + 2\r\n        );\r\n\r\n        if (geoInfo.color) {\r\n          var data = getData(\r\n            polygonVertexIndex,\r\n            polygonIndex,\r\n            vertexIndex,\r\n            geoInfo.color\r\n          );\r\n\r\n          faceColors.push(data[0], data[1], data[2]);\r\n        }\r\n\r\n        if (geoInfo.skeleton) {\r\n          if (geoInfo.weightTable[vertexIndex] !== undefined) {\r\n            geoInfo.weightTable[vertexIndex].forEach(function(wt) {\r\n              weights.push(wt.weight);\r\n              weightIndices.push(wt.id);\r\n            });\r\n          }\r\n\r\n          if (weights.length > 4) {\r\n            if (!displayedWeightsWarning) {\r\n              console.warn(\r\n                \"THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.\"\r\n              );\r\n              displayedWeightsWarning = true;\r\n            }\r\n\r\n            var wIndex = [0, 0, 0, 0];\r\n            var Weight = [0, 0, 0, 0];\r\n\r\n            weights.forEach(function(weight, weightIndex) {\r\n              var currentWeight = weight;\r\n              var currentIndex = weightIndices[weightIndex];\r\n\r\n              Weight.forEach(function(\r\n                comparedWeight,\r\n                comparedWeightIndex,\r\n                comparedWeightArray\r\n              ) {\r\n                if (currentWeight > comparedWeight) {\r\n                  comparedWeightArray[comparedWeightIndex] = currentWeight;\r\n                  currentWeight = comparedWeight;\r\n\r\n                  var tmp = wIndex[comparedWeightIndex];\r\n                  wIndex[comparedWeightIndex] = currentIndex;\r\n                  currentIndex = tmp;\r\n                }\r\n              });\r\n            });\r\n\r\n            weightIndices = wIndex;\r\n            weights = Weight;\r\n          }\r\n\r\n          // if the weight array is shorter than 4 pad with 0s\r\n          while (weights.length < 4) {\r\n            weights.push(0);\r\n            weightIndices.push(0);\r\n          }\r\n\r\n          for (var i = 0; i < 4; ++i) {\r\n            faceWeights.push(weights[i]);\r\n            faceWeightIndices.push(weightIndices[i]);\r\n          }\r\n        }\r\n\r\n        if (geoInfo.normal) {\r\n          var data = getData(\r\n            polygonVertexIndex,\r\n            polygonIndex,\r\n            vertexIndex,\r\n            geoInfo.normal\r\n          );\r\n\r\n          faceNormals.push(data[0], data[1], data[2]);\r\n        }\r\n\r\n        if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\r\n          var materialIndex = getData(\r\n            polygonVertexIndex,\r\n            polygonIndex,\r\n            vertexIndex,\r\n            geoInfo.material\r\n          )[0];\r\n        }\r\n\r\n        if (geoInfo.uv) {\r\n          geoInfo.uv.forEach(function(uv, i) {\r\n            var data = getData(\r\n              polygonVertexIndex,\r\n              polygonIndex,\r\n              vertexIndex,\r\n              uv\r\n            );\r\n\r\n            if (faceUVs[i] === undefined) {\r\n              faceUVs[i] = [];\r\n            }\r\n\r\n            faceUVs[i].push(data[0]);\r\n            faceUVs[i].push(data[1]);\r\n          });\r\n        }\r\n\r\n        faceLength++;\r\n\r\n        if (endOfFace) {\r\n          self.genFace(\r\n            buffers,\r\n            geoInfo,\r\n            facePositionIndexes,\r\n            materialIndex,\r\n            faceNormals,\r\n            faceColors,\r\n            faceUVs,\r\n            faceWeights,\r\n            faceWeightIndices,\r\n            faceLength\r\n          );\r\n\r\n          polygonIndex++;\r\n          faceLength = 0;\r\n\r\n          // reset arrays for the next face\r\n          facePositionIndexes = [];\r\n          faceNormals = [];\r\n          faceColors = [];\r\n          faceUVs = [];\r\n          faceWeights = [];\r\n          faceWeightIndices = [];\r\n        }\r\n      });\r\n\r\n      return buffers;\r\n    },\r\n\r\n    // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\r\n    genFace: function(\r\n      buffers,\r\n      geoInfo,\r\n      facePositionIndexes,\r\n      materialIndex,\r\n      faceNormals,\r\n      faceColors,\r\n      faceUVs,\r\n      faceWeights,\r\n      faceWeightIndices,\r\n      faceLength\r\n    ) {\r\n      for (var i = 2; i < faceLength; i++) {\r\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\r\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\r\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\r\n\r\n        buffers.vertex.push(\r\n          geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]\r\n        );\r\n        buffers.vertex.push(\r\n          geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]\r\n        );\r\n        buffers.vertex.push(\r\n          geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]\r\n        );\r\n\r\n        buffers.vertex.push(\r\n          geoInfo.vertexPositions[facePositionIndexes[i * 3]]\r\n        );\r\n        buffers.vertex.push(\r\n          geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]\r\n        );\r\n        buffers.vertex.push(\r\n          geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]\r\n        );\r\n\r\n        if (geoInfo.skeleton) {\r\n          buffers.vertexWeights.push(faceWeights[0]);\r\n          buffers.vertexWeights.push(faceWeights[1]);\r\n          buffers.vertexWeights.push(faceWeights[2]);\r\n          buffers.vertexWeights.push(faceWeights[3]);\r\n\r\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\r\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\r\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\r\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\r\n\r\n          buffers.vertexWeights.push(faceWeights[i * 4]);\r\n          buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\r\n          buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\r\n          buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\r\n\r\n          buffers.weightsIndices.push(faceWeightIndices[0]);\r\n          buffers.weightsIndices.push(faceWeightIndices[1]);\r\n          buffers.weightsIndices.push(faceWeightIndices[2]);\r\n          buffers.weightsIndices.push(faceWeightIndices[3]);\r\n\r\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\r\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\r\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\r\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\r\n\r\n          buffers.weightsIndices.push(faceWeightIndices[i * 4]);\r\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\r\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\r\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\r\n        }\r\n\r\n        if (geoInfo.color) {\r\n          buffers.colors.push(faceColors[0]);\r\n          buffers.colors.push(faceColors[1]);\r\n          buffers.colors.push(faceColors[2]);\r\n\r\n          buffers.colors.push(faceColors[(i - 1) * 3]);\r\n          buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\r\n          buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\r\n\r\n          buffers.colors.push(faceColors[i * 3]);\r\n          buffers.colors.push(faceColors[i * 3 + 1]);\r\n          buffers.colors.push(faceColors[i * 3 + 2]);\r\n        }\r\n\r\n        if (geoInfo.material && geoInfo.material.mappingType !== \"AllSame\") {\r\n          buffers.materialIndex.push(materialIndex);\r\n          buffers.materialIndex.push(materialIndex);\r\n          buffers.materialIndex.push(materialIndex);\r\n        }\r\n\r\n        if (geoInfo.normal) {\r\n          buffers.normal.push(faceNormals[0]);\r\n          buffers.normal.push(faceNormals[1]);\r\n          buffers.normal.push(faceNormals[2]);\r\n\r\n          buffers.normal.push(faceNormals[(i - 1) * 3]);\r\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\r\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\r\n\r\n          buffers.normal.push(faceNormals[i * 3]);\r\n          buffers.normal.push(faceNormals[i * 3 + 1]);\r\n          buffers.normal.push(faceNormals[i * 3 + 2]);\r\n        }\r\n\r\n        if (geoInfo.uv) {\r\n          geoInfo.uv.forEach(function(uv, j) {\r\n            if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\r\n\r\n            buffers.uvs[j].push(faceUVs[j][0]);\r\n            buffers.uvs[j].push(faceUVs[j][1]);\r\n\r\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\r\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\r\n\r\n            buffers.uvs[j].push(faceUVs[j][i * 2]);\r\n            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\r\n          });\r\n        }\r\n      }\r\n    },\r\n\r\n    addMorphTargets: function(\r\n      parentGeo,\r\n      parentGeoNode,\r\n      morphTarget,\r\n      preTransform\r\n    ) {\r\n      if (morphTarget === null) return;\r\n\r\n      parentGeo.morphAttributes.position = [];\r\n      // parentGeo.morphAttributes.normal = []; // not implemented\r\n\r\n      var self = this;\r\n      morphTarget.rawTargets.forEach(function(rawTarget) {\r\n        var morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\r\n\r\n        if (morphGeoNode !== undefined) {\r\n          self.genMorphGeometry(\r\n            parentGeo,\r\n            parentGeoNode,\r\n            morphGeoNode,\r\n            preTransform,\r\n            rawTarget.name\r\n          );\r\n        }\r\n      });\r\n    },\r\n\r\n    // a morph geometry node is similar to a standard  node, and the node is also contained\r\n    // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\r\n    // and a special attribute Index defining which vertices of the original geometry are affected\r\n    // Normal and position attributes only have data for the vertices that are affected by the morph\r\n    genMorphGeometry: function(\r\n      parentGeo,\r\n      parentGeoNode,\r\n      morphGeoNode,\r\n      preTransform,\r\n      name\r\n    ) {\r\n      var morphGeo = new THREE.BufferGeometry();\r\n      if (morphGeoNode.attrName) morphGeo.name = morphGeoNode.attrName;\r\n\r\n      var vertexIndices =\r\n        parentGeoNode.PolygonVertexIndex !== undefined\r\n          ? parentGeoNode.PolygonVertexIndex.a\r\n          : [];\r\n\r\n      // make a copy of the parent's vertex positions\r\n      var vertexPositions =\r\n        parentGeoNode.Vertices !== undefined\r\n          ? parentGeoNode.Vertices.a.slice()\r\n          : [];\r\n\r\n      var morphPositions =\r\n        morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\r\n      var indices =\r\n        morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\r\n\r\n      for (var i = 0; i < indices.length; i++) {\r\n        var morphIndex = indices[i] * 3;\r\n\r\n        // FBX format uses blend shapes rather than morph targets. This can be converted\r\n        // by additively combining the blend shape positions with the original geometry's positions\r\n        vertexPositions[morphIndex] += morphPositions[i * 3];\r\n        vertexPositions[morphIndex + 1] += morphPositions[i * 3 + 1];\r\n        vertexPositions[morphIndex + 2] += morphPositions[i * 3 + 2];\r\n      }\r\n\r\n      // TODO: add morph normal support\r\n      var morphGeoInfo = {\r\n        vertexIndices: vertexIndices,\r\n        vertexPositions: vertexPositions\r\n      };\r\n\r\n      var morphBuffers = this.genBuffers(morphGeoInfo);\r\n\r\n      var positionAttribute = new THREE.Float32BufferAttribute(\r\n        morphBuffers.vertex,\r\n        3\r\n      );\r\n      positionAttribute.name = name || morphGeoNode.attrName;\r\n\r\n      preTransform.applyToBufferAttribute(positionAttribute);\r\n\r\n      parentGeo.morphAttributes.position.push(positionAttribute);\r\n    },\r\n\r\n    // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\r\n    parseNormals: function(NormalNode) {\r\n      var mappingType = NormalNode.MappingInformationType;\r\n      var referenceType = NormalNode.ReferenceInformationType;\r\n      var buffer = NormalNode.Normals.a;\r\n      var indexBuffer = [];\r\n      if (referenceType === \"IndexToDirect\") {\r\n        if (\"NormalIndex\" in NormalNode) {\r\n          indexBuffer = NormalNode.NormalIndex.a;\r\n        } else if (\"NormalsIndex\" in NormalNode) {\r\n          indexBuffer = NormalNode.NormalsIndex.a;\r\n        }\r\n      }\r\n\r\n      return {\r\n        dataSize: 3,\r\n        buffer: buffer,\r\n        indices: indexBuffer,\r\n        mappingType: mappingType,\r\n        referenceType: referenceType\r\n      };\r\n    },\r\n\r\n    // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\r\n    parseUVs: function(UVNode) {\r\n      var mappingType = UVNode.MappingInformationType;\r\n      var referenceType = UVNode.ReferenceInformationType;\r\n      var buffer = UVNode.UV.a;\r\n      var indexBuffer = [];\r\n      if (referenceType === \"IndexToDirect\") {\r\n        indexBuffer = UVNode.UVIndex.a;\r\n      }\r\n\r\n      return {\r\n        dataSize: 2,\r\n        buffer: buffer,\r\n        indices: indexBuffer,\r\n        mappingType: mappingType,\r\n        referenceType: referenceType\r\n      };\r\n    },\r\n\r\n    // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\r\n    parseVertexColors: function(ColorNode) {\r\n      var mappingType = ColorNode.MappingInformationType;\r\n      var referenceType = ColorNode.ReferenceInformationType;\r\n      var buffer = ColorNode.Colors.a;\r\n      var indexBuffer = [];\r\n      if (referenceType === \"IndexToDirect\") {\r\n        indexBuffer = ColorNode.ColorIndex.a;\r\n      }\r\n\r\n      return {\r\n        dataSize: 4,\r\n        buffer: buffer,\r\n        indices: indexBuffer,\r\n        mappingType: mappingType,\r\n        referenceType: referenceType\r\n      };\r\n    },\r\n\r\n    // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\r\n    parseMaterialIndices: function(MaterialNode) {\r\n      var mappingType = MaterialNode.MappingInformationType;\r\n      var referenceType = MaterialNode.ReferenceInformationType;\r\n\r\n      if (mappingType === \"NoMappingInformation\") {\r\n        return {\r\n          dataSize: 1,\r\n          buffer: [0],\r\n          indices: [0],\r\n          mappingType: \"AllSame\",\r\n          referenceType: referenceType\r\n        };\r\n      }\r\n\r\n      var materialIndexBuffer = MaterialNode.Materials.a;\r\n\r\n      // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\r\n      // we expect.So we create an intermediate buffer that points to the index in the buffer,\r\n      // for conforming with the other functions we've written for other data.\r\n      var materialIndices = [];\r\n\r\n      for (var i = 0; i < materialIndexBuffer.length; ++i) {\r\n        materialIndices.push(i);\r\n      }\r\n\r\n      return {\r\n        dataSize: 1,\r\n        buffer: materialIndexBuffer,\r\n        indices: materialIndices,\r\n        mappingType: mappingType,\r\n        referenceType: referenceType\r\n      };\r\n    },\r\n\r\n    // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\r\n    parseNurbsGeometry: function(geoNode) {\r\n      if (THREE.NURBSCurve === undefined) {\r\n        console.error(\r\n          \"THREE.FBXLoader: The loader relies on THREE.NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.\"\r\n        );\r\n        return new THREE.BufferGeometry();\r\n      }\r\n\r\n      var order = parseInt(geoNode.Order);\r\n\r\n      if (isNaN(order)) {\r\n        console.error(\r\n          \"THREE.FBXLoader: Invalid Order %s given for geometry ID: %s\",\r\n          geoNode.Order,\r\n          geoNode.id\r\n        );\r\n        return new THREE.BufferGeometry();\r\n      }\r\n\r\n      var degree = order - 1;\r\n\r\n      var knots = geoNode.KnotVector.a;\r\n      var controlPoints = [];\r\n      var pointsValues = geoNode.Points.a;\r\n\r\n      for (var i = 0, l = pointsValues.length; i < l; i += 4) {\r\n        controlPoints.push(new THREE.Vector4().fromArray(pointsValues, i));\r\n      }\r\n\r\n      var startKnot, endKnot;\r\n\r\n      if (geoNode.Form === \"Closed\") {\r\n        controlPoints.push(controlPoints[0]);\r\n      } else if (geoNode.Form === \"Periodic\") {\r\n        startKnot = degree;\r\n        endKnot = knots.length - 1 - startKnot;\r\n\r\n        for (var i = 0; i < degree; ++i) {\r\n          controlPoints.push(controlPoints[i]);\r\n        }\r\n      }\r\n\r\n      var curve = new THREE.NURBSCurve(\r\n        degree,\r\n        knots,\r\n        controlPoints,\r\n        startKnot,\r\n        endKnot\r\n      );\r\n      var vertices = curve.getPoints(controlPoints.length * 7);\r\n\r\n      var positions = new Float32Array(vertices.length * 3);\r\n\r\n      vertices.forEach(function(vertex, i) {\r\n        vertex.toArray(positions, i * 3);\r\n      });\r\n\r\n      var geometry = new THREE.BufferGeometry();\r\n      geometry.addAttribute(\r\n        \"position\",\r\n        new THREE.BufferAttribute(positions, 3)\r\n      );\r\n\r\n      return geometry;\r\n    }\r\n  };\r\n\r\n  // parse animation data from FBXTree\r\n  function AnimationParser() {}\r\n\r\n  AnimationParser.prototype = {\r\n    constructor: AnimationParser,\r\n\r\n    // take raw animation clips and turn them into three.js animation clips\r\n    parse: function() {\r\n      var animationClips = [];\r\n\r\n      var rawClips = this.parseClips();\r\n\r\n      if (rawClips === undefined) return;\r\n\r\n      for (var key in rawClips) {\r\n        var rawClip = rawClips[key];\r\n\r\n        var clip = this.addClip(rawClip);\r\n\r\n        animationClips.push(clip);\r\n      }\r\n\r\n      return animationClips;\r\n    },\r\n\r\n    parseClips: function() {\r\n      // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\r\n      // if this is undefined we can safely assume there are no animations\r\n      if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\r\n\r\n      var curveNodesMap = this.parseAnimationCurveNodes();\r\n\r\n      this.parseAnimationCurves(curveNodesMap);\r\n\r\n      var layersMap = this.parseAnimationLayers(curveNodesMap);\r\n      var rawClips = this.parseAnimStacks(layersMap);\r\n\r\n      return rawClips;\r\n    },\r\n\r\n    // parse nodes in FBXTree.Objects.AnimationCurveNode\r\n    // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\r\n    // and is referenced by an AnimationLayer\r\n    parseAnimationCurveNodes: function() {\r\n      var rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\r\n\r\n      var curveNodesMap = new Map();\r\n\r\n      for (var nodeID in rawCurveNodes) {\r\n        var rawCurveNode = rawCurveNodes[nodeID];\r\n\r\n        if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\r\n          var curveNode = {\r\n            id: rawCurveNode.id,\r\n            attr: rawCurveNode.attrName,\r\n            curves: {}\r\n          };\r\n\r\n          curveNodesMap.set(curveNode.id, curveNode);\r\n        }\r\n      }\r\n\r\n      return curveNodesMap;\r\n    },\r\n\r\n    // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\r\n    // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\r\n    // axis ( e.g. times and values of x rotation)\r\n    parseAnimationCurves: function(curveNodesMap) {\r\n      var rawCurves = fbxTree.Objects.AnimationCurve;\r\n\r\n      // TODO: Many values are identical up to roundoff error, but won't be optimised\r\n      // e.g. position times: [0, 0.4, 0. 8]\r\n      // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\r\n      // clearly, this should be optimised to\r\n      // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\r\n      // this shows up in nearly every FBX file, and generally time array is length > 100\r\n\r\n      for (var nodeID in rawCurves) {\r\n        var animationCurve = {\r\n          id: rawCurves[nodeID].id,\r\n          times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\r\n          values: rawCurves[nodeID].KeyValueFloat.a\r\n        };\r\n\r\n        var relationships = connections.get(animationCurve.id);\r\n\r\n        if (relationships !== undefined) {\r\n          var animationCurveID = relationships.parents[0].ID;\r\n          var animationCurveRelationship =\r\n            relationships.parents[0].relationship;\r\n\r\n          if (animationCurveRelationship.match(/X/)) {\r\n            curveNodesMap.get(animationCurveID).curves[\"x\"] = animationCurve;\r\n          } else if (animationCurveRelationship.match(/Y/)) {\r\n            curveNodesMap.get(animationCurveID).curves[\"y\"] = animationCurve;\r\n          } else if (animationCurveRelationship.match(/Z/)) {\r\n            curveNodesMap.get(animationCurveID).curves[\"z\"] = animationCurve;\r\n          } else if (\r\n            animationCurveRelationship.match(/d|DeformPercent/) &&\r\n            curveNodesMap.has(animationCurveID)\r\n          ) {\r\n            curveNodesMap.get(animationCurveID).curves[\r\n              \"morph\"\r\n            ] = animationCurve;\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\r\n    // to various AnimationCurveNodes and is referenced by an AnimationStack node\r\n    // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\r\n    parseAnimationLayers: function(curveNodesMap) {\r\n      var rawLayers = fbxTree.Objects.AnimationLayer;\r\n\r\n      var layersMap = new Map();\r\n\r\n      for (var nodeID in rawLayers) {\r\n        var layerCurveNodes = [];\r\n\r\n        var connection = connections.get(parseInt(nodeID));\r\n\r\n        if (connection !== undefined) {\r\n          // all the animationCurveNodes used in the layer\r\n          var children = connection.children;\r\n\r\n          children.forEach(function(child, i) {\r\n            if (curveNodesMap.has(child.ID)) {\r\n              var curveNode = curveNodesMap.get(child.ID);\r\n\r\n              // check that the curves are defined for at least one axis, otherwise ignore the curveNode\r\n              if (\r\n                curveNode.curves.x !== undefined ||\r\n                curveNode.curves.y !== undefined ||\r\n                curveNode.curves.z !== undefined\r\n              ) {\r\n                if (layerCurveNodes[i] === undefined) {\r\n                  var modelID = connections\r\n                    .get(child.ID)\r\n                    .parents.filter(function(parent) {\r\n                      return parent.relationship !== undefined;\r\n                    })[0].ID;\r\n\r\n                  if (modelID !== undefined) {\r\n                    var rawModel = fbxTree.Objects.Model[modelID.toString()];\r\n\r\n                    var node = {\r\n                      modelName: THREE.PropertyBinding.sanitizeNodeName(\r\n                        rawModel.attrName\r\n                      ),\r\n                      ID: rawModel.id,\r\n                      initialPosition: [0, 0, 0],\r\n                      initialRotation: [0, 0, 0],\r\n                      initialScale: [1, 1, 1]\r\n                    };\r\n\r\n                    sceneGraph.traverse(function(child) {\r\n                      if ((child.ID = rawModel.id)) {\r\n                        node.transform = child.matrix;\r\n\r\n                        if (child.userData.transformData)\r\n                          node.eulerOrder =\r\n                            child.userData.transformData.eulerOrder;\r\n                      }\r\n                    });\r\n\r\n                    if (!node.transform) node.transform = new THREE.Matrix4();\r\n\r\n                    // if the animated model is pre rotated, we'll have to apply the pre rotations to every\r\n                    // animation value as well\r\n                    if (\"PreRotation\" in rawModel)\r\n                      node.preRotation = rawModel.PreRotation.value;\r\n                    if (\"PostRotation\" in rawModel)\r\n                      node.postRotation = rawModel.PostRotation.value;\r\n\r\n                    layerCurveNodes[i] = node;\r\n                  }\r\n                }\r\n\r\n                if (layerCurveNodes[i])\r\n                  layerCurveNodes[i][curveNode.attr] = curveNode;\r\n              } else if (curveNode.curves.morph !== undefined) {\r\n                if (layerCurveNodes[i] === undefined) {\r\n                  var deformerID = connections\r\n                    .get(child.ID)\r\n                    .parents.filter(function(parent) {\r\n                      return parent.relationship !== undefined;\r\n                    })[0].ID;\r\n\r\n                  var morpherID = connections.get(deformerID).parents[0].ID;\r\n                  var geoID = connections.get(morpherID).parents[0].ID;\r\n\r\n                  // assuming geometry is not used in more than one model\r\n                  var modelID = connections.get(geoID).parents[0].ID;\r\n\r\n                  var rawModel = fbxTree.Objects.Model[modelID];\r\n\r\n                  var node = {\r\n                    modelName: THREE.PropertyBinding.sanitizeNodeName(\r\n                      rawModel.attrName\r\n                    ),\r\n                    morphName: fbxTree.Objects.Deformer[deformerID].attrName\r\n                  };\r\n\r\n                  layerCurveNodes[i] = node;\r\n                }\r\n\r\n                layerCurveNodes[i][curveNode.attr] = curveNode;\r\n              }\r\n            }\r\n          });\r\n\r\n          layersMap.set(parseInt(nodeID), layerCurveNodes);\r\n        }\r\n      }\r\n\r\n      return layersMap;\r\n    },\r\n\r\n    // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\r\n    // hierarchy. Each Stack node will be used to create a THREE.AnimationClip\r\n    parseAnimStacks: function(layersMap) {\r\n      var rawStacks = fbxTree.Objects.AnimationStack;\r\n\r\n      // connect the stacks (clips) up to the layers\r\n      var rawClips = {};\r\n\r\n      for (var nodeID in rawStacks) {\r\n        var children = connections.get(parseInt(nodeID)).children;\r\n\r\n        if (children.length > 1) {\r\n          // it seems like stacks will always be associated with a single layer. But just in case there are files\r\n          // where there are multiple layers per stack, we'll display a warning\r\n          console.warn(\r\n            \"THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.\"\r\n          );\r\n        }\r\n\r\n        var layer = layersMap.get(children[0].ID);\r\n\r\n        rawClips[nodeID] = {\r\n          name: rawStacks[nodeID].attrName,\r\n          layer: layer\r\n        };\r\n      }\r\n\r\n      return rawClips;\r\n    },\r\n\r\n    addClip: function(rawClip) {\r\n      var tracks = [];\r\n\r\n      var self = this;\r\n      rawClip.layer.forEach(function(rawTracks) {\r\n        tracks = tracks.concat(self.generateTracks(rawTracks));\r\n      });\r\n\r\n      return new THREE.AnimationClip(rawClip.name, -1, tracks);\r\n    },\r\n\r\n    generateTracks: function(rawTracks) {\r\n      var tracks = [];\r\n\r\n      var initialPosition = new THREE.Vector3();\r\n      var initialRotation = new THREE.Quaternion();\r\n      var initialScale = new THREE.Vector3();\r\n\r\n      if (rawTracks.transform)\r\n        rawTracks.transform.decompose(\r\n          initialPosition,\r\n          initialRotation,\r\n          initialScale\r\n        );\r\n\r\n      initialPosition = initialPosition.toArray();\r\n      initialRotation = new THREE.Euler()\r\n        .setFromQuaternion(initialRotation, rawTracks.eulerOrder)\r\n        .toArray();\r\n      initialScale = initialScale.toArray();\r\n\r\n      if (\r\n        rawTracks.T !== undefined &&\r\n        Object.keys(rawTracks.T.curves).length > 0\r\n      ) {\r\n        var positionTrack = this.generateVectorTrack(\r\n          rawTracks.modelName,\r\n          rawTracks.T.curves,\r\n          initialPosition,\r\n          \"position\"\r\n        );\r\n        if (positionTrack !== undefined) tracks.push(positionTrack);\r\n      }\r\n\r\n      if (\r\n        rawTracks.R !== undefined &&\r\n        Object.keys(rawTracks.R.curves).length > 0\r\n      ) {\r\n        var rotationTrack = this.generateRotationTrack(\r\n          rawTracks.modelName,\r\n          rawTracks.R.curves,\r\n          initialRotation,\r\n          rawTracks.preRotation,\r\n          rawTracks.postRotation,\r\n          rawTracks.eulerOrder\r\n        );\r\n        if (rotationTrack !== undefined) tracks.push(rotationTrack);\r\n      }\r\n\r\n      if (\r\n        rawTracks.S !== undefined &&\r\n        Object.keys(rawTracks.S.curves).length > 0\r\n      ) {\r\n        var scaleTrack = this.generateVectorTrack(\r\n          rawTracks.modelName,\r\n          rawTracks.S.curves,\r\n          initialScale,\r\n          \"scale\"\r\n        );\r\n        if (scaleTrack !== undefined) tracks.push(scaleTrack);\r\n      }\r\n\r\n      if (rawTracks.DeformPercent !== undefined) {\r\n        var morphTrack = this.generateMorphTrack(rawTracks);\r\n        if (morphTrack !== undefined) tracks.push(morphTrack);\r\n      }\r\n\r\n      return tracks;\r\n    },\r\n\r\n    generateVectorTrack: function(modelName, curves, initialValue, type) {\r\n      var times = this.getTimesForAllAxes(curves);\r\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\r\n\r\n      return new THREE.VectorKeyframeTrack(\r\n        modelName + \".\" + type,\r\n        times,\r\n        values\r\n      );\r\n    },\r\n\r\n    generateRotationTrack: function(\r\n      modelName,\r\n      curves,\r\n      initialValue,\r\n      preRotation,\r\n      postRotation,\r\n      eulerOrder\r\n    ) {\r\n      if (curves.x !== undefined) {\r\n        this.interpolateRotations(curves.x);\r\n        curves.x.values = curves.x.values.map(THREE.Math.degToRad);\r\n      }\r\n      if (curves.y !== undefined) {\r\n        this.interpolateRotations(curves.y);\r\n        curves.y.values = curves.y.values.map(THREE.Math.degToRad);\r\n      }\r\n      if (curves.z !== undefined) {\r\n        this.interpolateRotations(curves.z);\r\n        curves.z.values = curves.z.values.map(THREE.Math.degToRad);\r\n      }\r\n\r\n      var times = this.getTimesForAllAxes(curves);\r\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\r\n\r\n      if (preRotation !== undefined) {\r\n        preRotation = preRotation.map(THREE.Math.degToRad);\r\n        preRotation.push(eulerOrder);\r\n\r\n        preRotation = new THREE.Euler().fromArray(preRotation);\r\n        preRotation = new THREE.Quaternion().setFromEuler(preRotation);\r\n      }\r\n\r\n      if (postRotation !== undefined) {\r\n        postRotation = postRotation.map(THREE.Math.degToRad);\r\n        postRotation.push(eulerOrder);\r\n\r\n        postRotation = new THREE.Euler().fromArray(postRotation);\r\n        postRotation = new THREE.Quaternion()\r\n          .setFromEuler(postRotation)\r\n          .inverse();\r\n      }\r\n\r\n      var quaternion = new THREE.Quaternion();\r\n      var euler = new THREE.Euler();\r\n\r\n      var quaternionValues = [];\r\n\r\n      for (var i = 0; i < values.length; i += 3) {\r\n        euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\r\n\r\n        quaternion.setFromEuler(euler);\r\n\r\n        if (preRotation !== undefined) quaternion.premultiply(preRotation);\r\n        if (postRotation !== undefined) quaternion.multiply(postRotation);\r\n\r\n        quaternion.toArray(quaternionValues, (i / 3) * 4);\r\n      }\r\n\r\n      return new THREE.QuaternionKeyframeTrack(\r\n        modelName + \".quaternion\",\r\n        times,\r\n        quaternionValues\r\n      );\r\n    },\r\n\r\n    generateMorphTrack: function(rawTracks) {\r\n      var curves = rawTracks.DeformPercent.curves.morph;\r\n      var values = curves.values.map(function(val) {\r\n        return val / 100;\r\n      });\r\n\r\n      var morphNum = sceneGraph.getObjectByName(rawTracks.modelName)\r\n        .morphTargetDictionary[rawTracks.morphName];\r\n\r\n      return new THREE.NumberKeyframeTrack(\r\n        rawTracks.modelName + \".morphTargetInfluences[\" + morphNum + \"]\",\r\n        curves.times,\r\n        values\r\n      );\r\n    },\r\n\r\n    // For all animated objects, times are defined separately for each axis\r\n    // Here we'll combine the times into one sorted array without duplicates\r\n    getTimesForAllAxes: function(curves) {\r\n      var times = [];\r\n\r\n      // first join together the times for each axis, if defined\r\n      if (curves.x !== undefined) times = times.concat(curves.x.times);\r\n      if (curves.y !== undefined) times = times.concat(curves.y.times);\r\n      if (curves.z !== undefined) times = times.concat(curves.z.times);\r\n\r\n      // then sort them and remove duplicates\r\n      times = times\r\n        .sort(function(a, b) {\r\n          return a - b;\r\n        })\r\n        .filter(function(elem, index, array) {\r\n          return array.indexOf(elem) == index;\r\n        });\r\n\r\n      return times;\r\n    },\r\n\r\n    getKeyframeTrackValues: function(times, curves, initialValue) {\r\n      var prevValue = initialValue;\r\n\r\n      var values = [];\r\n\r\n      var xIndex = -1;\r\n      var yIndex = -1;\r\n      var zIndex = -1;\r\n\r\n      times.forEach(function(time) {\r\n        if (curves.x) xIndex = curves.x.times.indexOf(time);\r\n        if (curves.y) yIndex = curves.y.times.indexOf(time);\r\n        if (curves.z) zIndex = curves.z.times.indexOf(time);\r\n\r\n        // if there is an x value defined for this frame, use that\r\n        if (xIndex !== -1) {\r\n          var xValue = curves.x.values[xIndex];\r\n          values.push(xValue);\r\n          prevValue[0] = xValue;\r\n        } else {\r\n          // otherwise use the x value from the previous frame\r\n          values.push(prevValue[0]);\r\n        }\r\n\r\n        if (yIndex !== -1) {\r\n          var yValue = curves.y.values[yIndex];\r\n          values.push(yValue);\r\n          prevValue[1] = yValue;\r\n        } else {\r\n          values.push(prevValue[1]);\r\n        }\r\n\r\n        if (zIndex !== -1) {\r\n          var zValue = curves.z.values[zIndex];\r\n          values.push(zValue);\r\n          prevValue[2] = zValue;\r\n        } else {\r\n          values.push(prevValue[2]);\r\n        }\r\n      });\r\n\r\n      return values;\r\n    },\r\n\r\n    // Rotations are defined as Euler angles which can have values  of any size\r\n    // These will be converted to quaternions which don't support values greater than\r\n    // PI, so we'll interpolate large rotations\r\n    interpolateRotations: function(curve) {\r\n      for (var i = 1; i < curve.values.length; i++) {\r\n        var initialValue = curve.values[i - 1];\r\n        var valuesSpan = curve.values[i] - initialValue;\r\n\r\n        var absoluteSpan = Math.abs(valuesSpan);\r\n\r\n        if (absoluteSpan >= 180) {\r\n          var numSubIntervals = absoluteSpan / 180;\r\n\r\n          var step = valuesSpan / numSubIntervals;\r\n          var nextValue = initialValue + step;\r\n\r\n          var initialTime = curve.times[i - 1];\r\n          var timeSpan = curve.times[i] - initialTime;\r\n          var interval = timeSpan / numSubIntervals;\r\n          var nextTime = initialTime + interval;\r\n\r\n          var interpolatedTimes = [];\r\n          var interpolatedValues = [];\r\n\r\n          while (nextTime < curve.times[i]) {\r\n            interpolatedTimes.push(nextTime);\r\n            nextTime += interval;\r\n\r\n            interpolatedValues.push(nextValue);\r\n            nextValue += step;\r\n          }\r\n\r\n          curve.times = inject(curve.times, i, interpolatedTimes);\r\n          curve.values = inject(curve.values, i, interpolatedValues);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // parse an FBX file in ASCII format\r\n  function TextParser() {}\r\n\r\n  TextParser.prototype = {\r\n    constructor: TextParser,\r\n\r\n    getPrevNode: function() {\r\n      return this.nodeStack[this.currentIndent - 2];\r\n    },\r\n\r\n    getCurrentNode: function() {\r\n      return this.nodeStack[this.currentIndent - 1];\r\n    },\r\n\r\n    getCurrentProp: function() {\r\n      return this.currentProp;\r\n    },\r\n\r\n    pushStack: function(node) {\r\n      this.nodeStack.push(node);\r\n      this.currentIndent += 1;\r\n    },\r\n\r\n    popStack: function() {\r\n      this.nodeStack.pop();\r\n      this.currentIndent -= 1;\r\n    },\r\n\r\n    setCurrentProp: function(val, name) {\r\n      this.currentProp = val;\r\n      this.currentPropName = name;\r\n    },\r\n\r\n    parse: function(text) {\r\n      this.currentIndent = 0;\r\n\r\n      this.allNodes = new FBXTree();\r\n      this.nodeStack = [];\r\n      this.currentProp = [];\r\n      this.currentPropName = \"\";\r\n\r\n      var self = this;\r\n\r\n      var split = text.split(/[\\r\\n]+/);\r\n\r\n      split.forEach(function(line, i) {\r\n        var matchComment = line.match(/^[\\s\\t]*;/);\r\n        var matchEmpty = line.match(/^[\\s\\t]*$/);\r\n\r\n        if (matchComment || matchEmpty) return;\r\n\r\n        var matchBeginning = line.match(\r\n          \"^\\\\t{\" + self.currentIndent + \"}(\\\\w+):(.*){\",\r\n          \"\"\r\n        );\r\n        var matchProperty = line.match(\r\n          \"^\\\\t{\" + self.currentIndent + \"}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)\"\r\n        );\r\n        var matchEnd = line.match(\"^\\\\t{\" + (self.currentIndent - 1) + \"}}\");\r\n\r\n        if (matchBeginning) {\r\n          self.parseNodeBegin(line, matchBeginning);\r\n        } else if (matchProperty) {\r\n          self.parseNodeProperty(line, matchProperty, split[++i]);\r\n        } else if (matchEnd) {\r\n          self.popStack();\r\n        } else if (line.match(/^[^\\s\\t}]/)) {\r\n          // large arrays are split over multiple lines terminated with a ',' character\r\n          // if this is encountered the line needs to be joined to the previous line\r\n          self.parseNodePropertyContinued(line);\r\n        }\r\n      });\r\n\r\n      return this.allNodes;\r\n    },\r\n\r\n    parseNodeBegin: function(line, property) {\r\n      var nodeName = property[1]\r\n        .trim()\r\n        .replace(/^\"/, \"\")\r\n        .replace(/\"$/, \"\");\r\n\r\n      var nodeAttrs = property[2].split(\",\").map(function(attr) {\r\n        return attr\r\n          .trim()\r\n          .replace(/^\"/, \"\")\r\n          .replace(/\"$/, \"\");\r\n      });\r\n\r\n      var node = { name: nodeName };\r\n      var attrs = this.parseNodeAttr(nodeAttrs);\r\n\r\n      var currentNode = this.getCurrentNode();\r\n\r\n      // a top node\r\n      if (this.currentIndent === 0) {\r\n        this.allNodes.add(nodeName, node);\r\n      } else {\r\n        // a subnode\r\n\r\n        // if the subnode already exists, append it\r\n        if (nodeName in currentNode) {\r\n          // special case Pose needs PoseNodes as an array\r\n          if (nodeName === \"PoseNode\") {\r\n            currentNode.PoseNode.push(node);\r\n          } else if (currentNode[nodeName].id !== undefined) {\r\n            currentNode[nodeName] = {};\r\n            currentNode[nodeName][currentNode[nodeName].id] =\r\n              currentNode[nodeName];\r\n          }\r\n\r\n          if (attrs.id !== \"\") currentNode[nodeName][attrs.id] = node;\r\n        } else if (typeof attrs.id === \"number\") {\r\n          currentNode[nodeName] = {};\r\n          currentNode[nodeName][attrs.id] = node;\r\n        } else if (nodeName !== \"Properties70\") {\r\n          if (nodeName === \"PoseNode\") currentNode[nodeName] = [node];\r\n          else currentNode[nodeName] = node;\r\n        }\r\n      }\r\n\r\n      if (typeof attrs.id === \"number\") node.id = attrs.id;\r\n      if (attrs.name !== \"\") node.attrName = attrs.name;\r\n      if (attrs.type !== \"\") node.attrType = attrs.type;\r\n\r\n      this.pushStack(node);\r\n    },\r\n\r\n    parseNodeAttr: function(attrs) {\r\n      var id = attrs[0];\r\n\r\n      if (attrs[0] !== \"\") {\r\n        id = parseInt(attrs[0]);\r\n\r\n        if (isNaN(id)) {\r\n          id = attrs[0];\r\n        }\r\n      }\r\n\r\n      var name = \"\",\r\n        type = \"\";\r\n\r\n      if (attrs.length > 1) {\r\n        name = attrs[1].replace(/^(\\w+)::/, \"\");\r\n        type = attrs[2];\r\n      }\r\n\r\n      return { id: id, name: name, type: type };\r\n    },\r\n\r\n    parseNodeProperty: function(line, property, contentLine) {\r\n      var propName = property[1]\r\n        .replace(/^\"/, \"\")\r\n        .replace(/\"$/, \"\")\r\n        .trim();\r\n      var propValue = property[2]\r\n        .replace(/^\"/, \"\")\r\n        .replace(/\"$/, \"\")\r\n        .trim();\r\n\r\n      // for special case: base64 image data follows \"Content: ,\" line\r\n      //\tContent: ,\r\n      //\t \"/9j/4RDaRXhpZgAATU0A...\"\r\n      if (propName === \"Content\" && propValue === \",\") {\r\n        propValue = contentLine\r\n          .replace(/\"/g, \"\")\r\n          .replace(/,$/, \"\")\r\n          .trim();\r\n      }\r\n\r\n      var currentNode = this.getCurrentNode();\r\n      var parentName = currentNode.name;\r\n\r\n      if (parentName === \"Properties70\") {\r\n        this.parseNodeSpecialProperty(line, propName, propValue);\r\n        return;\r\n      }\r\n\r\n      // Connections\r\n      if (propName === \"C\") {\r\n        var connProps = propValue.split(\",\").slice(1);\r\n        var from = parseInt(connProps[0]);\r\n        var to = parseInt(connProps[1]);\r\n\r\n        var rest = propValue.split(\",\").slice(3);\r\n\r\n        rest = rest.map(function(elem) {\r\n          return elem.trim().replace(/^\"/, \"\");\r\n        });\r\n\r\n        propName = \"connections\";\r\n        propValue = [from, to];\r\n        append(propValue, rest);\r\n\r\n        if (currentNode[propName] === undefined) {\r\n          currentNode[propName] = [];\r\n        }\r\n      }\r\n\r\n      // Node\r\n      if (propName === \"Node\") currentNode.id = propValue;\r\n\r\n      // connections\r\n      if (propName in currentNode && Array.isArray(currentNode[propName])) {\r\n        currentNode[propName].push(propValue);\r\n      } else {\r\n        if (propName !== \"a\") currentNode[propName] = propValue;\r\n        else currentNode.a = propValue;\r\n      }\r\n\r\n      this.setCurrentProp(currentNode, propName);\r\n\r\n      // convert string to array, unless it ends in ',' in which case more will be added to it\r\n      if (propName === \"a\" && propValue.slice(-1) !== \",\") {\r\n        currentNode.a = parseNumberArray(propValue);\r\n      }\r\n    },\r\n\r\n    parseNodePropertyContinued: function(line) {\r\n      var currentNode = this.getCurrentNode();\r\n\r\n      currentNode.a += line;\r\n\r\n      // if the line doesn't end in ',' we have reached the end of the property value\r\n      // so convert the string to an array\r\n      if (line.slice(-1) !== \",\") {\r\n        currentNode.a = parseNumberArray(currentNode.a);\r\n      }\r\n    },\r\n\r\n    // parse \"Property70\"\r\n    parseNodeSpecialProperty: function(line, propName, propValue) {\r\n      // split this\r\n      // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\r\n      // into array like below\r\n      // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\r\n      var props = propValue.split('\",').map(function(prop) {\r\n        return prop\r\n          .trim()\r\n          .replace(/^\\\"/, \"\")\r\n          .replace(/\\s/, \"_\");\r\n      });\r\n\r\n      var innerPropName = props[0];\r\n      var innerPropType1 = props[1];\r\n      var innerPropType2 = props[2];\r\n      var innerPropFlag = props[3];\r\n      var innerPropValue = props[4];\r\n\r\n      // cast values where needed, otherwise leave as strings\r\n      switch (innerPropType1) {\r\n        case \"int\":\r\n        case \"enum\":\r\n        case \"bool\":\r\n        case \"ULongLong\":\r\n        case \"double\":\r\n        case \"Number\":\r\n        case \"FieldOfView\":\r\n          innerPropValue = parseFloat(innerPropValue);\r\n          break;\r\n\r\n        case \"Color\":\r\n        case \"ColorRGB\":\r\n        case \"Vector3D\":\r\n        case \"Lcl_Translation\":\r\n        case \"Lcl_Rotation\":\r\n        case \"Lcl_Scaling\":\r\n          innerPropValue = parseNumberArray(innerPropValue);\r\n          break;\r\n      }\r\n\r\n      // CAUTION: these props must append to parent's parent\r\n      this.getPrevNode()[innerPropName] = {\r\n        type: innerPropType1,\r\n        type2: innerPropType2,\r\n        flag: innerPropFlag,\r\n        value: innerPropValue\r\n      };\r\n\r\n      this.setCurrentProp(this.getPrevNode(), innerPropName);\r\n    }\r\n  };\r\n\r\n  // Parse an FBX file in Binary format\r\n  function BinaryParser() {}\r\n\r\n  BinaryParser.prototype = {\r\n    constructor: BinaryParser,\r\n\r\n    parse: function(buffer) {\r\n      var reader = new BinaryReader(buffer);\r\n      reader.skip(23); // skip magic 23 bytes\r\n\r\n      var version = reader.getUint32();\r\n\r\n      console.log(\"THREE.FBXLoader: FBX binary version: \" + version);\r\n\r\n      var allNodes = new FBXTree();\r\n\r\n      while (!this.endOfContent(reader)) {\r\n        var node = this.parseNode(reader, version);\r\n        if (node !== null) allNodes.add(node.name, node);\r\n      }\r\n\r\n      return allNodes;\r\n    },\r\n\r\n    // Check if reader has reached the end of content.\r\n    endOfContent: function(reader) {\r\n      // footer size: 160bytes + 16-byte alignment padding\r\n      // - 16bytes: magic\r\n      // - padding til 16-byte alignment (at least 1byte?)\r\n      //\t(seems like some exporters embed fixed 15 or 16bytes?)\r\n      // - 4bytes: magic\r\n      // - 4bytes: version\r\n      // - 120bytes: zero\r\n      // - 16bytes: magic\r\n      if (reader.size() % 16 === 0) {\r\n        return ((reader.getOffset() + 160 + 16) & ~0xf) >= reader.size();\r\n      } else {\r\n        return reader.getOffset() + 160 + 16 >= reader.size();\r\n      }\r\n    },\r\n\r\n    // recursively parse nodes until the end of the file is reached\r\n    parseNode: function(reader, version) {\r\n      var node = {};\r\n\r\n      // The first three data sizes depends on version.\r\n      var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\r\n      var numProperties =\r\n        version >= 7500 ? reader.getUint64() : reader.getUint32();\r\n\r\n      // note: do not remove this even if you get a linter warning as it moves the buffer forward\r\n      var propertyListLen =\r\n        version >= 7500 ? reader.getUint64() : reader.getUint32();\r\n\r\n      var nameLen = reader.getUint8();\r\n      var name = reader.getString(nameLen);\r\n\r\n      // Regards this node as NULL-record if endOffset is zero\r\n      if (endOffset === 0) return null;\r\n\r\n      var propertyList = [];\r\n\r\n      for (var i = 0; i < numProperties; i++) {\r\n        propertyList.push(this.parseProperty(reader));\r\n      }\r\n\r\n      // Regards the first three elements in propertyList as id, attrName, and attrType\r\n      var id = propertyList.length > 0 ? propertyList[0] : \"\";\r\n      var attrName = propertyList.length > 1 ? propertyList[1] : \"\";\r\n      var attrType = propertyList.length > 2 ? propertyList[2] : \"\";\r\n\r\n      // check if this node represents just a single property\r\n      // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\r\n      node.singleProperty =\r\n        numProperties === 1 && reader.getOffset() === endOffset ? true : false;\r\n\r\n      while (endOffset > reader.getOffset()) {\r\n        var subNode = this.parseNode(reader, version);\r\n\r\n        if (subNode !== null) this.parseSubNode(name, node, subNode);\r\n      }\r\n\r\n      node.propertyList = propertyList; // raw property list used by parent\r\n\r\n      if (typeof id === \"number\") node.id = id;\r\n      if (attrName !== \"\") node.attrName = attrName;\r\n      if (attrType !== \"\") node.attrType = attrType;\r\n      if (name !== \"\") node.name = name;\r\n\r\n      return node;\r\n    },\r\n\r\n    parseSubNode: function(name, node, subNode) {\r\n      // special case: child node is single property\r\n      if (subNode.singleProperty === true) {\r\n        var value = subNode.propertyList[0];\r\n\r\n        if (Array.isArray(value)) {\r\n          node[subNode.name] = subNode;\r\n\r\n          subNode.a = value;\r\n        } else {\r\n          node[subNode.name] = value;\r\n        }\r\n      } else if (name === \"Connections\" && subNode.name === \"C\") {\r\n        var array = [];\r\n\r\n        subNode.propertyList.forEach(function(property, i) {\r\n          // first Connection is FBX type (OO, OP, etc.). We'll discard these\r\n          if (i !== 0) array.push(property);\r\n        });\r\n\r\n        if (node.connections === undefined) {\r\n          node.connections = [];\r\n        }\r\n\r\n        node.connections.push(array);\r\n      } else if (subNode.name === \"Properties70\") {\r\n        var keys = Object.keys(subNode);\r\n\r\n        keys.forEach(function(key) {\r\n          node[key] = subNode[key];\r\n        });\r\n      } else if (name === \"Properties70\" && subNode.name === \"P\") {\r\n        var innerPropName = subNode.propertyList[0];\r\n        var innerPropType1 = subNode.propertyList[1];\r\n        var innerPropType2 = subNode.propertyList[2];\r\n        var innerPropFlag = subNode.propertyList[3];\r\n        var innerPropValue;\r\n\r\n        if (innerPropName.indexOf(\"Lcl \") === 0)\r\n          innerPropName = innerPropName.replace(\"Lcl \", \"Lcl_\");\r\n        if (innerPropType1.indexOf(\"Lcl \") === 0)\r\n          innerPropType1 = innerPropType1.replace(\"Lcl \", \"Lcl_\");\r\n\r\n        if (\r\n          innerPropType1 === \"Color\" ||\r\n          innerPropType1 === \"ColorRGB\" ||\r\n          innerPropType1 === \"Vector\" ||\r\n          innerPropType1 === \"Vector3D\" ||\r\n          innerPropType1.indexOf(\"Lcl_\") === 0\r\n        ) {\r\n          innerPropValue = [\r\n            subNode.propertyList[4],\r\n            subNode.propertyList[5],\r\n            subNode.propertyList[6]\r\n          ];\r\n        } else {\r\n          innerPropValue = subNode.propertyList[4];\r\n        }\r\n\r\n        // this will be copied to parent, see above\r\n        node[innerPropName] = {\r\n          type: innerPropType1,\r\n          type2: innerPropType2,\r\n          flag: innerPropFlag,\r\n          value: innerPropValue\r\n        };\r\n      } else if (node[subNode.name] === undefined) {\r\n        if (typeof subNode.id === \"number\") {\r\n          node[subNode.name] = {};\r\n          node[subNode.name][subNode.id] = subNode;\r\n        } else {\r\n          node[subNode.name] = subNode;\r\n        }\r\n      } else {\r\n        if (subNode.name === \"PoseNode\") {\r\n          if (!Array.isArray(node[subNode.name])) {\r\n            node[subNode.name] = [node[subNode.name]];\r\n          }\r\n\r\n          node[subNode.name].push(subNode);\r\n        } else if (node[subNode.name][subNode.id] === undefined) {\r\n          node[subNode.name][subNode.id] = subNode;\r\n        }\r\n      }\r\n    },\r\n\r\n    parseProperty: function(reader) {\r\n      var type = reader.getString(1);\r\n\r\n      switch (type) {\r\n        case \"C\":\r\n          return reader.getBoolean();\r\n\r\n        case \"D\":\r\n          return reader.getFloat64();\r\n\r\n        case \"F\":\r\n          return reader.getFloat32();\r\n\r\n        case \"I\":\r\n          return reader.getInt32();\r\n\r\n        case \"L\":\r\n          return reader.getInt64();\r\n\r\n        case \"R\":\r\n          var length = reader.getUint32();\r\n          return reader.getArrayBuffer(length);\r\n\r\n        case \"S\":\r\n          var length = reader.getUint32();\r\n          return reader.getString(length);\r\n\r\n        case \"Y\":\r\n          return reader.getInt16();\r\n\r\n        case \"b\":\r\n        case \"c\":\r\n        case \"d\":\r\n        case \"f\":\r\n        case \"i\":\r\n        case \"l\":\r\n          var arrayLength = reader.getUint32();\r\n          var encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\r\n          var compressedLength = reader.getUint32();\r\n\r\n          if (encoding === 0) {\r\n            switch (type) {\r\n              case \"b\":\r\n              case \"c\":\r\n                return reader.getBooleanArray(arrayLength);\r\n\r\n              case \"d\":\r\n                return reader.getFloat64Array(arrayLength);\r\n\r\n              case \"f\":\r\n                return reader.getFloat32Array(arrayLength);\r\n\r\n              case \"i\":\r\n                return reader.getInt32Array(arrayLength);\r\n\r\n              case \"l\":\r\n                return reader.getInt64Array(arrayLength);\r\n            }\r\n          }\r\n\r\n          var inflated = pako.inflate(\r\n            new Uint8Array(reader.getArrayBuffer(compressedLength))\r\n          );\r\n\r\n          var reader2 = new BinaryReader(inflated.buffer);\r\n\r\n          switch (type) {\r\n            case \"b\":\r\n            case \"c\":\r\n              return reader2.getBooleanArray(arrayLength);\r\n\r\n            case \"d\":\r\n              return reader2.getFloat64Array(arrayLength);\r\n\r\n            case \"f\":\r\n              return reader2.getFloat32Array(arrayLength);\r\n\r\n            case \"i\":\r\n              return reader2.getInt32Array(arrayLength);\r\n\r\n            case \"l\":\r\n              return reader2.getInt64Array(arrayLength);\r\n          }\r\n\r\n        default:\r\n          throw new Error(\"THREE.FBXLoader: Unknown property type \" + type);\r\n      }\r\n    }\r\n  };\r\n\r\n  function BinaryReader(buffer, littleEndian) {\r\n    this.dv = new DataView(buffer);\r\n    this.offset = 0;\r\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\r\n  }\r\n\r\n  BinaryReader.prototype = {\r\n    constructor: BinaryReader,\r\n\r\n    getOffset: function() {\r\n      return this.offset;\r\n    },\r\n\r\n    size: function() {\r\n      return this.dv.buffer.byteLength;\r\n    },\r\n\r\n    skip: function(length) {\r\n      this.offset += length;\r\n    },\r\n\r\n    // seems like true/false representation depends on exporter.\r\n    // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\r\n    // then sees LSB.\r\n    getBoolean: function() {\r\n      return (this.getUint8() & 1) === 1;\r\n    },\r\n\r\n    getBooleanArray: function(size) {\r\n      var a = [];\r\n\r\n      for (var i = 0; i < size; i++) {\r\n        a.push(this.getBoolean());\r\n      }\r\n\r\n      return a;\r\n    },\r\n\r\n    getUint8: function() {\r\n      var value = this.dv.getUint8(this.offset);\r\n      this.offset += 1;\r\n      return value;\r\n    },\r\n\r\n    getInt16: function() {\r\n      var value = this.dv.getInt16(this.offset, this.littleEndian);\r\n      this.offset += 2;\r\n      return value;\r\n    },\r\n\r\n    getInt32: function() {\r\n      var value = this.dv.getInt32(this.offset, this.littleEndian);\r\n      this.offset += 4;\r\n      return value;\r\n    },\r\n\r\n    getInt32Array: function(size) {\r\n      var a = [];\r\n\r\n      for (var i = 0; i < size; i++) {\r\n        a.push(this.getInt32());\r\n      }\r\n\r\n      return a;\r\n    },\r\n\r\n    getUint32: function() {\r\n      var value = this.dv.getUint32(this.offset, this.littleEndian);\r\n      this.offset += 4;\r\n      return value;\r\n    },\r\n\r\n    // JavaScript doesn't support 64-bit integer so calculate this here\r\n    // 1 << 32 will return 1 so using multiply operation instead here.\r\n    // There's a possibility that this method returns wrong value if the value\r\n    // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\r\n    // TODO: safely handle 64-bit integer\r\n    getInt64: function() {\r\n      var low, high;\r\n\r\n      if (this.littleEndian) {\r\n        low = this.getUint32();\r\n        high = this.getUint32();\r\n      } else {\r\n        high = this.getUint32();\r\n        low = this.getUint32();\r\n      }\r\n\r\n      // calculate negative value\r\n      if (high & 0x80000000) {\r\n        high = ~high & 0xffffffff;\r\n        low = ~low & 0xffffffff;\r\n\r\n        if (low === 0xffffffff) high = (high + 1) & 0xffffffff;\r\n\r\n        low = (low + 1) & 0xffffffff;\r\n\r\n        return -(high * 0x100000000 + low);\r\n      }\r\n\r\n      return high * 0x100000000 + low;\r\n    },\r\n\r\n    getInt64Array: function(size) {\r\n      var a = [];\r\n\r\n      for (var i = 0; i < size; i++) {\r\n        a.push(this.getInt64());\r\n      }\r\n\r\n      return a;\r\n    },\r\n\r\n    // Note: see getInt64() comment\r\n    getUint64: function() {\r\n      var low, high;\r\n\r\n      if (this.littleEndian) {\r\n        low = this.getUint32();\r\n        high = this.getUint32();\r\n      } else {\r\n        high = this.getUint32();\r\n        low = this.getUint32();\r\n      }\r\n\r\n      return high * 0x100000000 + low;\r\n    },\r\n\r\n    getFloat32: function() {\r\n      var value = this.dv.getFloat32(this.offset, this.littleEndian);\r\n      this.offset += 4;\r\n      return value;\r\n    },\r\n\r\n    getFloat32Array: function(size) {\r\n      var a = [];\r\n\r\n      for (var i = 0; i < size; i++) {\r\n        a.push(this.getFloat32());\r\n      }\r\n\r\n      return a;\r\n    },\r\n\r\n    getFloat64: function() {\r\n      var value = this.dv.getFloat64(this.offset, this.littleEndian);\r\n      this.offset += 8;\r\n      return value;\r\n    },\r\n\r\n    getFloat64Array: function(size) {\r\n      var a = [];\r\n\r\n      for (var i = 0; i < size; i++) {\r\n        a.push(this.getFloat64());\r\n      }\r\n\r\n      return a;\r\n    },\r\n\r\n    getArrayBuffer: function(size) {\r\n      var value = this.dv.buffer.slice(this.offset, this.offset + size);\r\n      this.offset += size;\r\n      return value;\r\n    },\r\n\r\n    getString: function(size) {\r\n      // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\r\n      var a = [];\r\n\r\n      for (var i = 0; i < size; i++) {\r\n        a[i] = this.getUint8();\r\n      }\r\n\r\n      var nullByte = a.indexOf(0);\r\n      if (nullByte >= 0) a = a.slice(0, nullByte);\r\n\r\n      return THREE.LoaderUtils.decodeText(new Uint8Array(a));\r\n    }\r\n  };\r\n\r\n  // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\r\n  // and BinaryParser( FBX Binary format)\r\n  function FBXTree() {}\r\n\r\n  FBXTree.prototype = {\r\n    constructor: FBXTree,\r\n\r\n    add: function(key, val) {\r\n      this[key] = val;\r\n    }\r\n  };\r\n\r\n  // ************** UTILITY FUNCTIONS **************\r\n\r\n  function isFbxFormatBinary(buffer) {\r\n    var CORRECT = \"Kaydara FBX Binary  \\0\";\r\n\r\n    return (\r\n      buffer.byteLength >= CORRECT.length &&\r\n      CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length)\r\n    );\r\n  }\r\n\r\n  function isFbxFormatASCII(text) {\r\n    var CORRECT = [\r\n      \"K\",\r\n      \"a\",\r\n      \"y\",\r\n      \"d\",\r\n      \"a\",\r\n      \"r\",\r\n      \"a\",\r\n      \"\\\\\",\r\n      \"F\",\r\n      \"B\",\r\n      \"X\",\r\n      \"\\\\\",\r\n      \"B\",\r\n      \"i\",\r\n      \"n\",\r\n      \"a\",\r\n      \"r\",\r\n      \"y\",\r\n      \"\\\\\",\r\n      \"\\\\\"\r\n    ];\r\n\r\n    var cursor = 0;\r\n\r\n    function read(offset) {\r\n      var result = text[offset - 1];\r\n      text = text.slice(cursor + offset);\r\n      cursor++;\r\n      return result;\r\n    }\r\n\r\n    for (var i = 0; i < CORRECT.length; ++i) {\r\n      var num = read(1);\r\n      if (num === CORRECT[i]) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function getFbxVersion(text) {\r\n    var versionRegExp = /FBXVersion: (\\d+)/;\r\n    var match = text.match(versionRegExp);\r\n    if (match) {\r\n      var version = parseInt(match[1]);\r\n      return version;\r\n    }\r\n    throw new Error(\r\n      \"THREE.FBXLoader: Cannot find the version number for the file given.\"\r\n    );\r\n  }\r\n\r\n  // Converts FBX ticks into real time seconds.\r\n  function convertFBXTimeToSeconds(time) {\r\n    return time / 46186158000;\r\n  }\r\n\r\n  var dataArray = [];\r\n\r\n  // extracts the data from the correct position in the FBX array based on indexing type\r\n  function getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\r\n    var index;\r\n\r\n    switch (infoObject.mappingType) {\r\n      case \"ByPolygonVertex\":\r\n        index = polygonVertexIndex;\r\n        break;\r\n      case \"ByPolygon\":\r\n        index = polygonIndex;\r\n        break;\r\n      case \"ByVertice\":\r\n        index = vertexIndex;\r\n        break;\r\n      case \"AllSame\":\r\n        index = infoObject.indices[0];\r\n        break;\r\n      default:\r\n        console.warn(\r\n          \"THREE.FBXLoader: unknown attribute mapping type \" +\r\n            infoObject.mappingType\r\n        );\r\n    }\r\n\r\n    if (infoObject.referenceType === \"IndexToDirect\")\r\n      index = infoObject.indices[index];\r\n\r\n    var from = index * infoObject.dataSize;\r\n    var to = from + infoObject.dataSize;\r\n\r\n    return slice(dataArray, infoObject.buffer, from, to);\r\n  }\r\n\r\n  var tempEuler = new THREE.Euler();\r\n  var tempVec = new THREE.Vector3();\r\n\r\n  // generate transformation from FBX transform data\r\n  // ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\r\n  // ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\r\n  function generateTransform(transformData) {\r\n    var lTranslationM = new THREE.Matrix4();\r\n    var lPreRotationM = new THREE.Matrix4();\r\n    var lRotationM = new THREE.Matrix4();\r\n    var lPostRotationM = new THREE.Matrix4();\r\n\r\n    var lScalingM = new THREE.Matrix4();\r\n    var lScalingPivotM = new THREE.Matrix4();\r\n    var lScalingOffsetM = new THREE.Matrix4();\r\n    var lRotationOffsetM = new THREE.Matrix4();\r\n    var lRotationPivotM = new THREE.Matrix4();\r\n\r\n    var lParentGX = new THREE.Matrix4();\r\n    var lGlobalT = new THREE.Matrix4();\r\n\r\n    var inheritType = transformData.inheritType ? transformData.inheritType : 0;\r\n\r\n    if (transformData.translation)\r\n      lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\r\n\r\n    if (transformData.preRotation) {\r\n      var array = transformData.preRotation.map(THREE.Math.degToRad);\r\n      array.push(transformData.eulerOrder);\r\n      lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\r\n    }\r\n\r\n    if (transformData.rotation) {\r\n      var array = transformData.rotation.map(THREE.Math.degToRad);\r\n      array.push(transformData.eulerOrder);\r\n      lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\r\n    }\r\n\r\n    if (transformData.postRotation) {\r\n      var array = transformData.postRotation.map(THREE.Math.degToRad);\r\n      array.push(transformData.eulerOrder);\r\n      lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\r\n    }\r\n\r\n    if (transformData.scale)\r\n      lScalingM.scale(tempVec.fromArray(transformData.scale));\r\n\r\n    // Pivots and offsets\r\n    if (transformData.scalingOffset)\r\n      lScalingOffsetM.setPosition(\r\n        tempVec.fromArray(transformData.scalingOffset)\r\n      );\r\n    if (transformData.scalingPivot)\r\n      lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\r\n    if (transformData.rotationOffset)\r\n      lRotationOffsetM.setPosition(\r\n        tempVec.fromArray(transformData.rotationOffset)\r\n      );\r\n    if (transformData.rotationPivot)\r\n      lRotationPivotM.setPosition(\r\n        tempVec.fromArray(transformData.rotationPivot)\r\n      );\r\n\r\n    // parent transform\r\n    if (transformData.parentMatrixWorld)\r\n      lParentGX = transformData.parentMatrixWorld;\r\n\r\n    // Global Rotation\r\n    var lLRM = lPreRotationM.multiply(lRotationM).multiply(lPostRotationM);\r\n    var lParentGRM = new THREE.Matrix4();\r\n    lParentGX.extractRotation(lParentGRM);\r\n\r\n    // Global Shear*Scaling\r\n    var lParentTM = new THREE.Matrix4();\r\n    var lLSM;\r\n    var lParentGSM;\r\n    var lParentGRSM;\r\n\r\n    lParentTM.copyPosition(lParentGX);\r\n    lParentGRSM = lParentTM.getInverse(lParentTM).multiply(lParentGX);\r\n    lParentGSM = lParentGRM.getInverse(lParentGRM).multiply(lParentGRSM);\r\n    lLSM = lScalingM;\r\n\r\n    var lGlobalRS;\r\n    if (inheritType === 0) {\r\n      lGlobalRS = lParentGRM\r\n        .multiply(lLRM)\r\n        .multiply(lParentGSM)\r\n        .multiply(lLSM);\r\n    } else if (inheritType === 1) {\r\n      lGlobalRS = lParentGRM\r\n        .multiply(lParentGSM)\r\n        .multiply(lLRM)\r\n        .multiply(lLSM);\r\n    } else {\r\n      var lParentLSM = new THREE.Matrix4().copy(lScalingM);\r\n\r\n      var lParentGSM_noLocal = lParentGSM.multiply(\r\n        lParentLSM.getInverse(lParentLSM)\r\n      );\r\n\r\n      lGlobalRS = lParentGRM\r\n        .multiply(lLRM)\r\n        .multiply(lParentGSM_noLocal)\r\n        .multiply(lLSM);\r\n    }\r\n\r\n    // Calculate the local transform matrix\r\n    var lTransform = lTranslationM\r\n      .multiply(lRotationOffsetM)\r\n      .multiply(lRotationPivotM)\r\n      .multiply(lPreRotationM)\r\n      .multiply(lRotationM)\r\n      .multiply(lPostRotationM)\r\n      .multiply(lRotationPivotM.getInverse(lRotationPivotM))\r\n      .multiply(lScalingOffsetM)\r\n      .multiply(lScalingPivotM)\r\n      .multiply(lScalingM)\r\n      .multiply(lScalingPivotM.getInverse(lScalingPivotM));\r\n\r\n    var lLocalTWithAllPivotAndOffsetInfo = new THREE.Matrix4().copyPosition(\r\n      lTransform\r\n    );\r\n\r\n    var lGlobalTranslation = lParentGX.multiply(\r\n      lLocalTWithAllPivotAndOffsetInfo\r\n    );\r\n    lGlobalT.copyPosition(lGlobalTranslation);\r\n\r\n    lTransform = lGlobalT.multiply(lGlobalRS);\r\n\r\n    return lTransform;\r\n  }\r\n\r\n  // Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\r\n  // ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\r\n  function getEulerOrder(order) {\r\n    order = order || 0;\r\n\r\n    var enums = [\r\n      \"ZYX\", // -> XYZ extrinsic\r\n      \"YZX\", // -> XZY extrinsic\r\n      \"XZY\", // -> YZX extrinsic\r\n      \"ZXY\", // -> YXZ extrinsic\r\n      \"YXZ\", // -> ZXY extrinsic\r\n      \"XYZ\" // -> ZYX extrinsic\r\n      //'SphericXYZ', // not possible to support\r\n    ];\r\n\r\n    if (order === 6) {\r\n      console.warn(\r\n        \"THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.\"\r\n      );\r\n      return enums[0];\r\n    }\r\n\r\n    return enums[order];\r\n  }\r\n\r\n  // Parses comma separated list of numbers and returns them an array.\r\n  // Used internally by the TextParser\r\n  function parseNumberArray(value) {\r\n    var array = value.split(\",\").map(function(val) {\r\n      return parseFloat(val);\r\n    });\r\n\r\n    return array;\r\n  }\r\n\r\n  function convertArrayBufferToString(buffer, from, to) {\r\n    if (from === undefined) from = 0;\r\n    if (to === undefined) to = buffer.byteLength;\r\n\r\n    return THREE.LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\r\n  }\r\n\r\n  function append(a, b) {\r\n    for (var i = 0, j = a.length, l = b.length; i < l; i++, j++) {\r\n      a[j] = b[i];\r\n    }\r\n  }\r\n\r\n  function slice(a, b, from, to) {\r\n    for (var i = from, j = 0; i < to; i++, j++) {\r\n      a[j] = b[i];\r\n    }\r\n\r\n    return a;\r\n  }\r\n\r\n  // inject array a2 into array a1 at index\r\n  function inject(a1, index, a2) {\r\n    return a1\r\n      .slice(0, index)\r\n      .concat(a2)\r\n      .concat(a1.slice(index));\r\n  }\r\n\r\n  return FBXLoader;\r\n})();\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body, html {\r\n    width: 100%;\r\n    height: 100%;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from \"react\";\r\nimport ReactDOM from \"@hot-loader/react-dom\";\r\n\r\nimport { isProd } from \"./environment\";\r\nimport { register as registerServiceWorker } from \"./serviceWorker\";\r\nimport GlobalStyle from \"./GlobalStyle\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <>\r\n    <GlobalStyle />\r\n    <App />\r\n  </>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nif (isProd) {\r\n  registerServiceWorker();\r\n}\r\n","export const isProd = process.env.NODE_ENV === \"production\";\r\nexport const isDev = !isProd;\r\n"],"sourceRoot":""}